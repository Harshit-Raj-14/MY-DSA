PS- 3346. Maximum Frequency of an Element After Performing Operations I && 3347. Maximum Frequency of an Element After Performing Operations II

Given an array nums, and integers k and numOperations, perform numOperations operations on nums. 
In each operation, select an index and add an integer in the range [-k, k] to nums[i]. 
The goal is to return the maximum possible frequency of any element in the array after all operations. 


Input: nums = [5,15,20,20], k = 5, numOperations = 1
Output: 3

Explanation: We can achieve a maximum frequency of two by: Adding +5 to nums[1].

/* CODE */
/* MAIN SOLUTION ACCEPTED FOR PART I : DIFFERNECE ARRAY TECHNIQUE O(n+k) */
class Solution {
    public int maxFrequency(int[] nums, int k, int ops) {
        HashMap<Integer, Integer> originalsreq = new HashMap<>();
        HashMap<Integer, Integer> intervals = new HashMap<>();  //intervals created (a-k, a+k)
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            originalsreq.put(nums[i], originalsreq.getOrDefault(nums[i],0)+1);
            min=Math.min(min, nums[i]-k);
            max=Math.max(max, nums[i]+k);
            intervals.put(nums[i]-k, intervals.getOrDefault(nums[i]-k,0)+1);   //range[nums[i]-k]++;
            intervals.put(nums[i]+k+1, intervals.getOrDefault(nums[i]+k+1,0)-1); //range[nums[i]+k+1]--;
        }
        int ans=1;  //max frequency
        for(int i=min; i<=max; i++){    //iterate through possible rnag eof array
            //make prefix sum of count array as per difference arrya technique
            if(i>min) intervals.put(i, intervals.getOrDefault(i, 0) + intervals.get(i - 1));
            else intervals.put(i, intervals.getOrDefault(i, 0));
            int originals = originalsreq.getOrDefault(i,0);
            int adjustables = intervals.get(i) - originals; //all possible adjustable when infinite ops
            adjustables=Math.min(adjustables, ops); //ops allowed
            ans=Math.max(ans, adjustables+originals);
        }
        return ans;
    }
}

/*
LOGIC---
Operation add(-k, k) to all elements.
Hence each element of array will now lie in a range:
arr : [a,b,c]
after operation:
[(a-k)to(a+k), (b-k)to(b+k), (c-k)to(c+k)]

Now to know the freq of maximum number that cna occur if we were allowed infinte number of operations, it would be equivalent to applying difference arrya technique by treating the above (a-k) to (a+k) as queries on a count array. And the max freq of a number will be the max of count array.

But the constraint is we don't have infinite operations. We have a fixed number of operations to apply:

So, let's say after applying difference array technique for a number x we get freq f.
Now the freq of this number x can come from those brought by applying operations and ones that already existed.
freq of x = f = (adjustables)after applying ops + (originals)were already in array

So, if we think the number of ops that we can apply is equal to adjustables or more than adjustables, then f can be our answer.
So in fact we would want f = adjustables + originals
where adjustables<=ops allowed

*/

/* OPTIMISATION ACCEPTED PART II HARD O(nlogn) */
class Solution {
    public int maxFrequency(int[] nums, int k, int ops) {
        Arrays.sort(nums);
        HashMap<Integer, Integer> originalsreq = new HashMap<>();
        TreeMap<Integer, Integer> intervals = new TreeMap<>();  //intervals created (a-k, a+k)
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            originalsreq.put(nums[i], originalsreq.getOrDefault(nums[i],0)+1);
            min=Math.min(min, nums[i]-k);
            max=Math.max(max, nums[i]+k);
            intervals.put(nums[i]-k, intervals.getOrDefault(nums[i]-k,0)+1);   //range[nums[i]-k]++;
            intervals.put(nums[i]+k+1, intervals.getOrDefault(nums[i]+k+1,0)-1);   //range[nums[i]+k+1]--;
            intervals.put(nums[i], intervals.getOrDefault(nums[i],0));   //range[nums[i]]; just add to intervals map
        }
        int ans=1;  //max frequency
        int prevfreq = 0;
        for (Map.Entry<Integer, Integer> entry : intervals.entrySet()){  //Iterate through the interval map
            entry.setValue(entry.getValue() + prevfreq);
            prevfreq = entry.getValue();
            int originals = originalsreq.getOrDefault(entry.getKey(), 0);
            int adjustables = entry.getValue() - originals;
            adjustables = Math.min(adjustables, ops);
            ans=Math.max(ans, adjustables+originals);
        }
        return ans;
    }
}

/*
LOGIC---
We know our number that will have maxfreq will be one on which the operation will be applied.
Specifically nums[i], nums[i]-k, nums[i]+k : somehow you have to just know this fact. 
So, instead of trying to iterate through range min to max.
Just iterate on points of treemap made of intervals. Use differnece array technique on it by maintiang a prev value.

Reason for treemap : sorted order => sort original array

*/







952. Largest Component Size by Common Factor - A directed graph problem involving DSU.

LC 239. Sliding Window Maximum - A hashing problem with an alternative solution using deque.

LC 11. Container With Most Water medium two-pointers based problem 

