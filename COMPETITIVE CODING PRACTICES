PS- Make Array consecutive
Given an array, we want to change the minimum number of elements to make all elements consecutive.
One operation allows you to change one element into any number you want.
Essentially, the goal is to ensure that if the element at index 1 is x, then the element at index 2 should be x + 1, and so on. 
Basically after the operations, the array should be of format [x, x + 1, x + 2, ….]

Input:[2,5,4,7,6] Output:2 Explanation: arr will become [2,3,4,5,6]

/* CODE */

public class int consecutive(int arr[]){
    int n=arr.length;
    HashMap<Integer, Integer> map = new HashMap<>();
    for(int i=0;i<n;i++){
        int key = arr[i] - i;
        map.put(key, map.getOrDefault(key, 0) + 1);
    }
    int biggestfamily=0;
    for(Map.Entry<Integer, Integer> entry: map.entrySet()){
        biggestfamily = Math.max(biggestfamily, entry.getValue());
    }
    return n-biggestfamily;
}
/*
LOGIC---
If I were to fix the first element 2, the array would have been [2, 3, 4, 5, 6] which would cost me 2 operations 
since I need to make the second and fourth element equal to 3 and 5. 
Notice that the elements [2, 4, 6] in the original array belong to the same family. 
If we fix one of them, we don't need to change the others because they complement each other.

By determining the size of each element's family, we can fix the elements in the largest family 
(in this case if we fix [2, 4, 6], we need to change only 2 elements in the array) to minimize the number of changes.

APPROACH---
If the element at index i is x, then the element at index i + 1 should be x + 1, index i + 2 should be x + 2, and so on.

Notice this pattern:
element - index
(x - i) = (x - i) 
(x + 1) - (i + 1) = (x - i) 
(x + 2) - (i + 2) = (x - i)

EUREKA---
Our general term tn = x-i
This pattern reveals that elements in the same family have a constant value of arr[i] - i. 
We can use this property to store family sizes in a map.

We create famileis of x-i and find the greatest frequency against each family.
Ops = n - biggest family
*/



/* DIFFERENCE ARRAY TECHNIQUE */
Problem
Let’s assume we have given an array of some size with some initial values (possibly all zeros). 
Now we have given a bunch of range update query like (l, r, x) — add x to all the element between l and r (both inclusive). 
After handling all the queries we have to return the array. Also, there should be very less (better to have zero) number of get query for an element or whole array.

Difference Array
So let’s use Difference Array (DA). We have to allocate another array (lets call it DA) which will handle the queries and whose size is one greater than that of given array 
(Size of (DA array) = Size of (given array) + 1).

Update Query
To perform a update query, we simply have to do, DA[l] += x and DA[r + 1] -= x (where l and r are starting and ending of the range and x is the value to be added). 
Since we have to add and subtract x at two indices, respectively, this operation is constant time.

Final array
After performing above operation on all queries, to get final array, simply calculate prefix sum of array DA.


In case of XOR
DA[l]^=x and DA[r+1]^=x 
xor khud ka hi pata kat deta hai




/*******************************************************************************************************/
PS- 
You are given a matrix nxm. Find the number of subgrids that has maximum of that subgrid=x.

/*
APPROACH 1---
Modify given grid as: elements == x as 1, >x as 2 and <x as 0. 
We need only 0s and 1s in our grid. Solely 0s won't count, total 1s would be our 1x1 subgrids. 

APPROACH 2---
1. Number of submatrices which has maximum <=X, and Number of submatrices whose maximum<=X-1. 
From these two results, you can get the number of submatrices whose maximum is exactly X.

2. To solve the problem Number of submatrices with max<=X, you can make all elements with>X as 0 and the rest as 1. 
Now your problem turns out to be the number of submatrices which contains all 1's. [LEETCODE - 1504. Count Submatrices With All Ones]

3. To solve the above problem, store the number of continuous ones  which are above the cell (including the cell), in a matrix. 
And then, in each row, assuming that the submatrix base lies in this row, take a sub array( which forms the base of the rectangle). 
Now, the minimum value in this array is the number of rectangles(submatrices) that can be formed with this base. 
So, for each row, if the row is the base of this rectangle, then number of rectangles is same as sum of all minimums of all sub arrays. 
This problem( sum of all minimums of all sub arrays) can be solved in O(n) using stack
(hint: for each element store the index of next greater element to left and right of that element.). 
Thats it.
*/




/******************************************************************************************************/
PS- C - XOR to All [AtCoder Regular Contest 135]
You are given an array of non-negative integers. You can do the operation below any number of times (possibly zero).
Choose an integer x from the array.
Replace all elements in array with arr[i]⊕x for every i.
Find the maximum possible value of ∑arr[i] from i=0 to i=n, after your operations.

/* CODE */
/* OPTIMAL SOLUTION O(30*n) */
import java.util.*;
public class Main{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        long arr[] = new long[n];
        long ans=0; //maxsum
        for(int i=0;i<arr.length;i++){
            arr[i]=sc.nextLong();
            ans+=arr[i];
        }
        int setbit[] = new int[30];
        //int zeros[] = new int[30];  //because zeros[i] = n-setbit[i] 
        //Step I: Decomposing bits : making a count frequency of set bits and zeros at each bit index
        for(int i=0;i<30;i++){
            for(int j=0;j<n;j++){
                setbit[i] += (arr[j]>>i)&1;
            }
        }
        //Step II: trying all x and see which will give us maximum sum
        for(long x : arr){
            long sum=0;    //currsum
            for(int i=0;i<30;i++){
                long xbit = (x>>i)&1;
                long setbits = setbit[i]; 
                long zeros = n-setbit[i];
                if(xbit==1) sum += zeros*(1<<i);    //since x is set, the zeros contribute to sum by becoming 1
                else sum += setbits*(1<<i);         //vice versa
            }
            ans=Math.max(ans, sum);
        }
        System.out.println(ans);
        sc.close();
    }
}
    
/*
LOGIC---
SPECIAL OBSERVATION LEARNING---
=> sum(a^x)  : O(n^2) ---> O(30*n)
=> If any set reached by multiple moves then that set also reached by single step

LOGIC---
{a1,a2}
Choose x=a1 => {0, a2^a1}
Now you can either choose x=0 or x=a2^a1
So, x=a2^a1 => we get {a2^a1, 0}

In fact if in first array{a1,a2} if you would have directly taken x=a2 => we would have got {a1^a2, 0}
which was same as previous array.
Hence we can say that even if we apply subseqeunt operations, and choose new x from new array, it would work as same choosing x from the original array itself.

eg : 
{a1,a2,a3}

x=a1 => {0, a2^a1, a3^a1}
x=a2 => {a1^a2, 0, a3^a2}
x=a3 => {a1^a3, a2^a3, 0}

do x=a1^a1 after x=a1 => {a1^a2, 0, a3^a2} which is same as doing x=a2
Hence it proved.
Conclusion : Even after one operation, if we try to take a new element from the new array to apply operation again,
it would yield the same result as taking some another element from the original array itself.

With this info you can now do the brute force in O(n^2).

Now OPTIMIZE----
Note : whenever you have to do some ∑(arr[i] ^ x)
TRICK : Decompose each bits and process them independently

eg: {1,3,5} and we choose x=5

arr[] = {1 3 5}
bit[1] = 1 1 1 => 3 setbits, 0 zeros
bit[2] = 0 1 0 => 1 setbit, 2 zeros
bit[3] = 0 0 1 => 1 setbit, 2 zeros
We know by xoring's we always flip the bits when they are unequal.
To get maximum sum we would want to create as many 1's we want.

So, if there are x setbits and y zeros.
If x>y => then we would want to take a zero at that position so we can get maximum 1's by doing (from x)0^1(from arr)
vice versa when x<y

Now we can apply the same logic of doing the above to our question because now x can only be picked from our array.
We can have two count frequency table of setbit count and zeros count from bit posiiton 0 to 30. [Given : 0<=arr[i]<=2^30]

setbit freq[]
zeros freq[]
Now using the above two arrays, we check against all possible x from arr[i] and see what gives us maximum sum.

Finding the setbit freq and zeros freq => O(30n)
and iterating for calculating sum for each x => O(30n)
TC - O(30n)

-> If we have to do summation of an array elements xored with a value.
It's better to do precomputations for storing the number of setbits and zero of the elements. 
=> O(N^2) can't be handled by constraints, so we get our answers by precomputing 
no.of 1's and 0's at each  i(0<=i<=30) and rest queries can be answered in O(30) time 
so for each element O(N*30).

*/
    


/* BRUTE FORCE O(n^2) */
import java.util.*;
public class Main{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        int arr[] = new int[n];
        for(int i=0;i<arr.length;i++){
            arr[i]=sc.nextInt();
        }
        long maxsum=sumArr(arr); //in case all elements are equal there is no need to ocnduct the operation
        for(int j=0;j<arr.length;j++){
            int x=arr[j];
            int temp[] = new int[arr.length];
            for(int i=0;i<arr.length;i++){
                temp[i]=arr[i]^x;
            }
            long currsum=sumArr(temp);
            maxsum=Math.max(maxsum, currsum);
        }
        System.out.println(maxsum);
        sc.close();
    }

    public static long sumArr(int arr[]){
        long sum=0;
        for(int i=0;i<arr.length;i++){
            sum+=arr[i];
        }
        return sum;
    }
}

/*
LOGIC---
We try all possible x from array one by one.
The only sitation when applying 0 operations is when all elements are equal. xoring with itself will give 0.
So, applying no operation in that case will give maximum sum.

eg: n=5, arr[]=10 10 10 10 10
o/p : 50
*/