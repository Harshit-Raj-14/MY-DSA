PS- KOKO EATING BANANAS

/* CODE */
class Solution {
    public int minEatingSpeed(int[] arr, int h) {
        int l=1;
        int r = 1000000001;
        int ans=0;
        while(l<=r){
            int mid = l+ (r-l)/2;
            if(binarySearch(arr, mid, h)){
                ans=mid;
                r=mid-1;    //let's look for even a better solution on left
            }
            else l=mid+1;
        }
        return ans;
    }

    public boolean binarySearch(int arr[], int mid, int h){
        int hoursNeeded=0;
        for(int i=0;i<arr.length;i++){
            hoursNeeded += (arr[i] + mid-1)/mid; // calculate ceiling of arr[i]/mid
            //hoursNeeded += Math.ceil((double)arr[i]/mid);    //arr[i] and mid are integers so division still return a back int, so make one of them double to get fractions
            if(hoursNeeded>h) return false; //police came even before finishing banana
        }
        return hoursNeeded<=h;
    }
}


/*
LOGIC---
Now we need to decide on a number which is the eating speed of koko, x banana/hour.
For the given number of hours we want the array elemtns (all banana in each pile) to become 0.

Much easier to understand, if say each index is a box and contains arr[i] bananas in it. We have h hours. In 1 hr the monkey will only go for one box and no more. We need to find min x speed to finish all the bananas.

Now the range of eating banana speed can vary from 1 to the largest element in the array.

So, in search space range (1, max(arr)) => our solution exist
=> the range space is sorted
form => NNNNNNNNNNNYYYYYYYYYY => need to find the first Y

BINARY SEARCH ON ANSWER

Note - don't do the foolish mistake of updating original array and h in function, which you always did
Use ciel values
*/




/*************************************************************************************************/
PS- 719. Find K-th Smallest Pair Distance
The distance of a pair of integers a and b is defined as the absolute difference between a and b.
Given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.

Input: nums = [1,3,1], k = 1
Output: 0
Explanation: Here are all the pairs: (1,3) -> 2, (1,1) -> 0, (3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.


/* CODE */
/* Binary Search + Two-Pointer Technique */
class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        Arrays.sort(nums);
        int l=0;
        int r=nums[nums.length-1] - nums[0];    //max possible difference
        int ans=0;
        while(l<=r){
            int mid=l+(r-l)/2;
            int countpairs = slidingwindow(nums, mid);
            if(countpairs<k) l=mid+1;  //we need more distance values so look ahead
            else{
                ans=mid;
                r=mid-1;
            }
        }
        return ans;
    }

    public int slidingwindow(int nums[], int mid){
        int i=0;
        int j=1;
        int pair=0;
        while(i<nums.length && j<nums.length){
            while(nums[j]-nums[i]>mid) i++; //we want pairs that have distance greater than mid, if not possible check pairs from next index
            pair+=j-i;
            j++;    //keeping i constant, check for next indexes to form pair with i
        }
        return pair;

    }
}

/*
LOGIC---
Binary Search on answer
Use binary search on possible pair distances (from 0 to the maximum difference in the sorted array). For each midpoint in the binary search, count pairs with distances ≤ this midpoint. Adjust the search range based on whether the count is less than or greater than k. This method efficiently narrows down to the k-th smallest distance by leveraging sorting and binary search.

So, from 0 till the max possible difference is a range space.

Each distance could have possible multiple pairs having same distance.

eg: [1,4,5,10] => sorted arr

Now when having i=1, j=10 and we say we need distance of pairs to be less than 50.
So, if 10-1=9<50 => it menas that other number between 1 and 10 would form a pair with 10 and still have distance less than 50.
Hnece j-i = no of pairs have distance less than x

So, what we are seeking is for the distance to have x value => x pairs basically the distance index should have k in its value only then it will be ou answer

=> its kind of like saying, there are k pairs having distance less than equal to x (0->x)


APPROACH---
    Binary Search:
        Calculate mid as the average of left and right.
        Use the issmallpairs() function to determine if there are at least k pairs with a distance less than or equal to mid.
        If issmallpairs() returns true, move right to mid to search for potentially smaller distances.
        f issmallpairs() returns false, move left to mid + 1 to search for larger distances.
        When the loop terminates, left will hold the k-th smallest distance.

    issmallpairs() function:
        This function counts how many pairs have a distance less than or equal to mid.
        Use a two-pointer technique where right iterates over the array and left advances when the distance exceeds mid.

TC - O(nlogn + nlog(max distance))
*/


/* BRUTE FORCE MAXHEAP TLE O(n^2 logk) */
class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        PriorityQueue<Integer> maxheap = new PriorityQueue<>(Collections.reverseOrder());
        ArrayList<Integer> dif= new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                maxheap.add(Math.abs(nums[j]-nums[i]));
                if(maxheap.size()>k) maxheap.poll();
            }
        }
        return maxheap.peek();
    }
}

/*
LOGIC---
use a Max-Heap (PriorityQueue in Java) to keep track of the smallest k distances.
we need smallest k dist => MAX-HEAP

Steps:
    - Iterate over all possible pairs (i, j) where i < j in      the array.
    - For each pair, calculate the absolute difference abs(nums[i] - nums[j]).
    - Add the difference to a Max-Heap.
    - If the size of the Max-Heap exceeds k, remove the largest element (this ensures that the heap only contains the k smallest differences).
    - Finally, return the top element of the Max-Heap, which is the k-th smallest distance.

Why TLE?
    - The approach is O(n^2 log k) where n is the length of the array.
    - The double loop over the pairs (i, j) makes it O(n^2).
    - Since you’re using a heap, each insertion and deletion operation is O(log k)
*/

/* BRUTE FORCE FREQUENCY COUNT TABLE O(n^2), O(m) */
Make a frequency table ranging from 0 to max_el(arr)-min_el(arr)
Find all pairs diff and put inside the above frequency table.
FInally find the kth term through freq table.


/* BRUTE FORCE O(N^2) */
Find all pair distances.
Put them in a list of ditances => sort them
return the kth element.

From here, you can have a thinking that what if we already had the list of distances in a sorted fashion. => like a count table showing no of pairs for each distance.
Would make life easy for us. => BINARY SEARCH ON ANSWER ON THIS VERY LIST => Something like applying binary search on answer



/*************************************************************************************************/

PS- Maximum Value (GFG contest 168)
The score of the array is defined as the minimum element in the array. Your goal is to maximize the score of the array.
You are allowed to perform the following operation any number of times:
• Choose any element from arr[i]. => Subtract k from arr[i] => Add 1 to any element in the array

Return the maximum score of the array you can achieve. In one operation you have to perform all three steps.
Input: n = 3, k = 2, arr = [1,0,3]
Output: 1
Explanation: Performing the operation once, removing 2 from third index and adding 1 to the second index, the array becomes [1,1,1]. 
The minimum value of the array is 1. We can see this is the maximum score of the array.

/* BINARY SEARCH ON ANSWER */
class Solution {
    public static int maxValueArray(int n, int k, int[] arr) {
        long l = 0;
        long r = 1000000000;    //see contriants of array values
        long ans = -1;  
        while (l <= r) {
            long mid = (l+r)/2;
            if (binary(arr, k, mid)) {
                ans = mid;  
                l = mid + 1;
            } 
            else r = mid - 1;
        }
        return (int)ans;
    }

    public static boolean binary(int[] arr, int k, long mid) {
        long powerofadding1 = 0;
        long  requiredpowerof1 = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > mid) powerofadding1 += (arr[i] - mid) / k;
            else  requiredpowerof1 += (mid - arr[i]);
        }
        if(powerofadding1 - requiredpowerof1 >= 0) return true;
        else return false;
    }
}

/*
LOGIC---
Maximise the minimum score(~element) of array => possiblity of binary search
Applying operations will be easier if we have sorted array => binary search confirmed

Our ans will only exist from the minimum to maximum elemnt of array.

We will get : YYYYYYYNNNNNNN
So, we need last Y.

So, if mid is our possible final maximised minimum value of array.
Subtracting k from an element gives us the power of adding 1 to any element.
But since mid is our minimum element in array. We wouldn't want the element from whwich we are subtracting k go lower than mid.

So, powerofadding1 = (arr[i]-mid)/k;

Now we ened to check whether powerofadding1 is enough to bring all element to mid, in case some are still les than mid.
So, requiredpowerof1 = mid-arr[i];

Now if requiredpowerof1-powerofadding1>=0 => we say its possible to get mid as the minimum of our array.
TC - O(nlogn) => inside binary search iterating array each time
*/



/*************************************************************************************************/
PS- D. Minimize the Difference (Codeforces Round 973 (Div. 2))
You are given an array a1,a2,…,an of length n. We can perform any number of operations on the array.
In one operation, we choose a position i (1≤i≤n-1)) and perform the following action:
a[i] = a[i]-1, and a[i+1]= a[i+1]+1

Find the minimum possible value of max(a1,a2,…,an)-min(a1,a2,…,an)

/* CODE */
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();  
        while (t-- > 0) {
            int n = sc.nextInt();  
            int arr[] = new int[n];
            int min=Integer.MAX_VALUE;
            int max=Integer.MIN_VALUE;
            for(int i=0;i<n;i++){
                arr[i]=sc.nextInt();
                min=Math.min(min, arr[i]);
                max=Math.max(max, arr[i]);
            }
            //Finding Minimized MAX 
            int l=min;  //l and r are possible ranges for our max to exist and minimised to
            int r=max;
            int minimized_max=-1;
            while(l<=r){
                int mid=l+(r-l)/2;
                if(isMinimizedMax(arr, mid)){   //type: NNNNNNYYYYY => need first Y
                    r=mid-1;
                    minimized_max=mid;
                }
                else l=mid+1;
            }
            //Finding Maximized MIN
            l=min;
            r=max;
            int maximized_min=-1;
            while(l<=r){
                int mid=l+(r-l)/2;
                if(isMaximizedMin(arr, mid)){   //type: YYYYYYYNNNNNN => need first Y
                    l=mid+1;
                    maximized_min=mid;
                }
                else r=mid-1;
            }
            System.out.println(minimized_max - maximized_min);
        }
        sc.close();
    }

    public static boolean isMinimizedMax(int arr[], int mid){   //mid is our candidate for maximum minimized
        int temp[] = Arrays.copyOf(arr, arr.length);    //do not update original array
        for(int i=0;i<temp.length-1;i++){    //iterate forward to make check on last element
            if(temp[i]>mid){
                while(i+1<temp.length && temp[i]>mid){
                    temp[i]-=1;
                    temp[i+1]+=1;
                }
            }
        }
        if(temp[temp.length-1]>mid) return false;
        else return true;   //we succeeded to get mid as the max of array
    }

    public static boolean isMaximizedMin(int arr[], int mid){   //mid is our candidate for maximized min
        int temp[] = Arrays.copyOf(arr, arr.length);
        for(int i=temp.length-1;i>=0;i--){    //iterate backward to make check on first element
            if(temp[i]<mid){
                while(i-1>=0 && temp[i]<mid){
                    temp[i]+=1;  //reversing i+2 to i
                    temp[i-1]-=1;    //reversing i to i-1
                }
            }
        }
        if(temp[0]<mid) return false;
        else return true;   //we succeeded to get mid as the min of array
    }
}
 
 
/*
LOGIC---
Objective : minimum possible value of max(a1,a2,…,an) − min(a1,a2,…,an).
So, we need to minimize the max of array and maximize the min of array to make the overall answer minimum.

=> BINARY SEARCH ON ANSWER (minimizing the max or maximising the min)

MINIMIZING THE MAX----
Let's consider array 4 2 3 1
curr max=4
Since we need to minimise our max. Think can we make 4 into 3. if possible think cna we make 3 into 2.
If possible can we make 2 into 1. If not then from here one all possiblities fail.
Infact the nature of having a number to exist as max in array is of type : 
4 3 2 1 0 -1 
YYYYYYNNNNNN something like this
Let's make it straight : 
-1 0 1 2 3 4....
NNNNNNNYYYYY

Dry run: since operation is ai = ai - 1 and ai+1= ai+1 + 1
arr=  4 2 3 1
4 is already max
Is max=3 possible:
iterate left to right since we are decrementing first and we need to minmise max
Minimise any element >3
=> 3 3 3 1 => so max=3 possible
Is max=2 possible:
=> 2 4 3 1 => 2 3 4 1 =>  2 2 5 1 =>  2 2 4 2 =>  2 2 3 3 =>  2 2 2 4 sinc eon last element operation cant be applied.
2 can't be max element.

So minimum of max is 3.


MAXIMIZING THE MIN----
arr=  4 2 3 1
curr min=1
Since we need to maximise our min. Think can we make 1 into 2. if possible can we make 2 into 3 and check so on...
We will see a pattern that one point we won't be able to achieve our min.

1 2 3 4 5 6 7 
YYYYYNNNNNNN something like this nature.

Dry run:
Is min=2 possible.
This time iterate from right to left, since operation on ai =ai-1 and ai+1= ai+1 + 1
[4,2,3,1] -> [4,2,2,2] so min=2 possible.
Is min=3 possible.
[4,2,2,2] -> [4,2,1,3] -> [4,1,2,3] -> [4,0,3,3] -> [3,1,3,3] -> [2,2,3,3] -> failed
hence you can see we have failed since on 0th index we can do only -1 and 3 is no longer possible to have as min

So, maximum of min is 2.

ans = max - min = 3-2  =1

*/


/* ACCEPTED */
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt(); 
        while (t-- > 0) {
            int n = sc.nextInt();  
            long[] arr = new long[n];
            for (int i = 0; i < n; i++) {
                arr[i] = sc.nextLong();
            }
            // Find Minimized Maximum
            long minimizedMax = findMinimizedMax(arr);
            // Find Maximized Minimum
            long maximizedMin = findMaximizedMin(arr);
            System.out.println(minimizedMax - maximizedMin);
        }
        sc.close();
    }

    public static long findMinimizedMax(long[] arr) {
        long l = (long) -1e15;
        long r = (long) 1e15;
        long minimizedMax = 0;
        while (l <= r) {
            long mid = (l + r) / 2;
            if (canMinimizeMax(arr, mid)) {
                r = mid - 1;
                minimizedMax = mid;
            } 
            else l = mid + 1;
        }
        return minimizedMax;
    }

    public static long findMaximizedMin(long[] arr) {
        long l = (long) -1e15;
        long r = (long) 1e15;
        long maximizedMin = 0;
        while (l<=r) {
            long mid = (l + r) / 2;
            if (canMaximizeMin(arr, mid)) {
                l = mid + 1;
                maximizedMin = mid;
            } else r = mid - 1;
        }
        return maximizedMin;
    }

    public static boolean canMinimizeMax(long[] arr, long mid) {
        long[] temp = Arrays.copyOf(arr, arr.length);   //don't update original array
        for (int i = 0; i < temp.length-1; i++) {
            if (temp[i] > mid) {
                long extra = temp[i] - mid; //applying the operation at once to save time 
                temp[i + 1] += extra;
                temp[i] = mid;  // Set current element to mid
            }
        }
        return temp[temp.length - 1] <= mid;
    }

    public static boolean canMaximizeMin(long[] arr, long mid) {
        long[] temp = Arrays.copyOf(arr, arr.length);
        for (int i = temp.length - 1; i > 0; i--) {
            if (temp[i] < mid) {
                long extra = mid - temp[i];
                temp[i - 1] -= extra;
                temp[i] = mid;  // Set current element to mid
            }
        }
        return temp[0] >= mid;
    }
}

/*
Note - The previous solution gives TLE this one just optmises the while loop for operations made.
*/

