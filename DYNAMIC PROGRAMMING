PS- 264. Ugly Number II
An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.
Given an integer n, return the nth ugly number.

/* CODE */
/* TABULATION DP O(n), O(n) */
class Solution {
    public int nthUglyNumber(int n) {
        int dp[] = new int[n+1];
        dp[0]=0;
        dp[1]=1;
        int x=1, y=1, z=1;
        for(int i=2;i<=n;i++){
            dp[i]=Math.min(Math.min(dp[x]*2, dp[y]*3), dp[z]*5);    //general: min(dp[x]*2, dp[y]*3, dp[z]*5)
            //Now to check which of the above got chosen
            if(dp[i]==dp[x]*2) x++;
            if(dp[i]==dp[y]*3) y++; // now don't use else reason explained
            if(dp[i]==dp[z]*5) z++;
        }
        return dp[n];
    }
}


/* 
LOGIC---
1 is the first ugly number. And we can make other ugly numbers from it like a tree. With three option at each step to either multiply it with 2,3 or 5. => all these will give us ugly numbers. this is our formula to generate ugly number.

Now we only need the nth ugly number.
So, while producing ugly numbers we would like to keep them producing in increasing order. So, while multiplying for each possiblity we would move to next number which produces minimum result.

dp[0] = 0;
dp[1] = 1; // (2^0 * 3^0 * 5^0)
dp[2] = 2; //(2*1) => min(dp[1]*2, dp[1]*3, dp[1]*5) => since dp[1]*2 is selected i++ but we only want for that happen for x.

dp[i] => ith ugly number

Hence we get a general idea that perhaps we should maintain and treat this as three different kind of lists. Since we want nth number we need to find all ugly numbers in order. But we will be multiplyign them in different combinations of 2,3,5 causing them not being ascending. Hence we need to take minimum first giving us the general formula:
dp[i]=min(dp[k]*2, dp[k]*3, dp[k]*5)
Now what is k : k refers to the different count of each 2,3,5. Now we need to keep tabs of them as well.
Since it will be differnet each of these is going to have differnet values.
So, x refers 2 series, y refers 3 series and z refers 5 series. 

So, dp[i]=MIN(dp[x]*2, dp[y]*3, dp[z]*5)
Initially, x=y=z=1; //since we are starting from dp[1]
Now whichever gets chosen its series index gets incremented to proceed further in series 
eg: in above dp[2] 'x' series was chosen so move it to next index x++; So, x became 2.

dp[3] = 3; //(3*1) => min(dp[2]*2, dp[1]*3, dp[1]*5) => min(4,3,5) => 3 chosen and do y++ => y=2
dp[4] = 4; //(2*2) => min(dp[2]*2, dp[2]*3, 5*dp[1]) => (4,6,5) => 4 is chosen and x++ => x=3 
dp[5] = 5; //(5*1) => min(dp[3]*2, dp[2]*3, 5*dp[1]) => (8,6,5) => 5 i chosen and ++ => z=2
and so on...
dp[6] = 6;
*/


/* BRUTE FORCE TLE O(nlogn)*/
class Solution {
    public int nthUglyNumber(int n) {
        int count=0;
        int i=0;
        int ans=0;
        while(count<n){
            if(isUgly(i)){
                ans=i;
                count++;
            }
            i++;
        }
        return ans;
    }
    public static boolean isUgly(int n){
        if(n<=0) return false;  //don't forget this condition otherwise leads to infinte loop at 0
        while(n%2==0) n/=2;
        while(n%3==0) n/=3;
        while(n%5==0) n/=5;
        return n==1;
    }
}

/*
LOGIC ---
We keep finding ugly numbers until we get to the nth number.
Call isUgly for every number until you reach the nth one.
O(n) -> loop
O(logn) -> isUgly()
*/


/******************************************************************************************/
PS- 198. House Robber
Find the maximum money you can rob from non-adjacent houses without triggering the alarm.

/* CODE */
/* MEMOISATION O(n), O(n) */
class Solution {
    public int rob(int[] nums) {
        int dp[] = new int[nums.length];
        Arrays.fill(dp, -1);
        return solve(nums, 0, dp);
    }

    public static int solve(int nums[], int idx, int dp[]) {
        if (idx >= nums.length) return 0;
        if (dp[idx] != -1) return dp[idx];
        int not_take = solve(nums, idx + 1, dp);
        int take = nums[idx] + solve(nums, idx + 2, dp);
        return dp[idx] = Math.max(take, not_take);
    }
}

/*
LOGIC---
Note - dp[nums.length-1], this value may not hold the correct maximum amount that can be robbed, depending on how the recursive calls are made. The correct return value should be the maximum amount that can be robbed starting from index 0, which is stored in dp[0] after all recursive calls.

*/

/* RECURSION TLE O(2^n) */
class Solution {
    public int rob(int[] nums){
        return solve(nums, 0);
    }

    public static int solve(int nums[], int idx){
        if(idx>=nums.length) return 0;
        int not_take = solve(nums, idx+1);
        int take=0;
        if(idx<nums.length) take=nums[idx] + solve(nums, idx+2);
        return Math.max(take, not_take);
    }
}

/* TABULATION DP */
class Solution {
    public int rob(int[] nums){
        int n=nums.length;
        int dp[] = new int[n+1];
        dp[0]=0;
        dp[1]=nums[0];  //maximum amt till i=0
        for(int i=1;i<nums.length;i++){
            dp[i+1]=Math.max(dp[i], dp[i-1]+nums[i]);
        }
        return dp[n];
    }
}

/* Iterative fibonacci O(n), O(1) */
/* the order is: prev2, prev1, num  */
public int rob(int[] nums) {
    int prev1 = 0;
    int prev2 = 0;
    for (int num : nums) {
        int tmp = prev1;
        prev1 = Math.max(prev2 + num, prev1);
        prev2 = tmp;
    }
    return prev1;
}


/******************************************************************************************/
PS-213. House Robber II
This tiem its a circular array. So, first house and last house are also neighbours.

/* CODE */
class Solution {
    public int rob(int[] nums){
        int n=nums.length;
        if(n==1) return nums[0];    //you can simply rob the hosue and not worry other thing  
        int dp1[] = new int[n+1];
        Arrays.fill(dp1, -1);
        int dp2[] = new int[n+1];
        Arrays.fill(dp2, -1);
        return Math.max(solve(nums, 0, n-2, dp1), solve(nums, 1, n-1, dp2));
    }

    public static int solve(int nums[], int l, int r, int dp[]){
        if(l>r) return 0;
        if(dp[l]!=-1) return dp[l];
        int not_take = solve(nums, l+1, r, dp);
        int take=0;
        if(l<=r) take=nums[l] + solve(nums, l+2, r, dp);
        return dp[l]=Math.max(take, not_take);
    }
}

/*
LOGIC---
Same as solving house robber I:
Now we only want that if we take index 0, we won't take n-1.
If we take index n-1, we won't take index 0.

So, do what they say, solution = Math.max(solve(0,n-2), solve(1,n-1))
Answer will be max of (robbing house 0 to n-2 and robbing house 1 to n-1)
*/


/*****************************************************************************************************/
PS- 337. House Robber III
Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.
There is only one entrance to this area, called root. Contact the police if two directly-linked houses were broken into on the same night.

/* CODE */
/* MEMOISATION DP O(n), O(n) */
class Solution {
    public int rob(TreeNode root){
        HashMap<TreeNode, Integer> map = new HashMap<>();
        return solve(root, map);
    }

    public static int solve(TreeNode curr, HashMap<TreeNode, Integer> map){
        if(curr==null) return 0;
        if(map.containsKey(curr)) return map.get(curr);
        int ans=0;
        //don't take the roor, so let's decide on its two children
        int not_take = solve(curr.left, map) + solve(curr.right, map);   
        //if taken the root, then next you will only be able to take its four grandhcildren 
        int take = curr.val;
        if(curr.left!=null) take+=solve(curr.left.left, map) + solve(curr.left.right, map);
        if(curr.right!=null) take+=solve(curr.right.right, map) + solve(curr.right.left, map);
       ans=Math.max(take, not_take);
        map.put(curr, ans);
        return ans;
    }
}


/* RECURSION TLE */ 
class Solution {
    public int rob(TreeNode root){
        return solve(root);
    }

    public static int solve(TreeNode curr){
        if(curr==null) return 0;
        //don't take the roor, so let's decide on its two children
        int not_take = solve(curr.left) + solve(curr.right);   
        //if taken the root, then next you will only be able to take its four grnadhcildren 
        int take = curr.val;
        if(curr.left!=null) take+=solve(curr.left.left) + solve(curr.left.right);
        if(curr.right!=null) take+=solve(curr.right.right) + solve(curr.right.left);
        return Math.max(take, not_take);
    }
}

/*
LOGIC---
Since we have to start with root and we can't rob two directly-linked houses. We have two cases:
Case1: If we rob the root node - Then we can't rob the child nodes of root,
but we can rob the 4 grandchildren of the root (i.e., root.left.left, root.left.right, root.right.left, root.right.right).
Case2: If we don't rob the root node - Then we can rob the 2 children of root (i.e., root.left, root.right).
And our answer will be maximum of the two cases.
T.C : O(2^n)
*/

/*****************************************************************************************************/
PS- 740. Delete and Earn
You want to maximize the number of points you get by performing the following operation any number of times:
Pick any nums[i] and delete it to earn nums[i] points. 
Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.
Return the maximum number of points you can earn by applying the above operation some number of times.

/* CODE */
/* RECURSION TLE TC-O(2^n) SC-O(n) */
class Solution {
    public int deleteAndEarn(int[] nums) {
        int count[] = new int[10001];
        for(int i=0;i<nums.length;i++){
            count[nums[i]]++;
        }
        return solve(1, count);
    }

    public static int solve(int x, int count[]){    //x is the element from nums
        if(x>=10001) return 0;
        int not_take = solve(x+1, count);
        int take=x*count[x] + solve(x+2, count); 
        return Math.max(take, not_take);
    }
}

/*
LOGIC---
Problem reduces to House Robber
Theme - don't pick the neighbour if you select an element

We are given if we pick x, we cannot pick x-1 and x+1 values
So, once we have got count frequency array.
We have unqiue values of each element and their frequency act as weights for scores

So, let's say you take x, then trying to take the next element x+2 and move in a forward fashion.
Gives the same effect as skipping x-1 and x+1.
*/

/* MEMOISATION TC-O(n) SC-O(n) */
class Solution {
    public int deleteAndEarn(int[] nums) {
        int count[] = new int[10001];
        for(int i=0;i<nums.length;i++){
            count[nums[i]]++;
        }
        int dp[] = new int[10001];
        Arrays.fill(dp, -1);
        return solve(1, count, dp);
    }

    public static int solve(int x, int count[], int dp[]){    //x is the element from nums
        if(x>=10001) return 0;
        if(dp[x]!=-1) return dp[x];
        int not_take = solve(x+1, count, dp);
        int take=x*count[x] + solve(x+2, count, dp); 
        return dp[x] = Math.max(take, not_take);
    }
}


/* TABULATION TC-O(n) SC-O(n) */
class Solution {
    public int deleteAndEarn(int[] nums) {
        int count[] = new int[10001];
        for(int i = 0; i < nums.length; i++) {
            count[nums[i]]++;
        }
        int dp[] = new int[10002];  // To avoid boundary issues
        dp[0] = 0;
        dp[1] = 1 * count[1];  // Initialize based on the count of '1's
        for(int i = 2; i < count.length; i++) {
            dp[i] = Math.max(dp[i-1], dp[i-2] + i*count[i]);  // Max of taking or not taking i
        }
        return dp[10000];   //the ending contraint is 10000 for nums[i] value
    }
}

/* SPACE OPTIMISED TABULATION TC-O(n) SC-O(1) */
class Solution {
    public int deleteAndEarn(int[] nums) {
        int count[] = new int[10001];
        for(int i = 0; i < nums.length; i++) {
            count[nums[i]]++;
        }
        int first=0;
        int second=count[1];
        for(int i=2; i<count.length; i++) {
            int val=Math.max(second, first + i*count[i]); 
            first=second;
            second=val;
        }
        return second;  
    }
}

/******************************************************************************************************/
PS- Maximum sum of non adjacent elements[APPLE]
There is unsorted integer array, return a maximum sum of non adjacent elements.

/* 
LOGIC----
Same thing as house robber above. Do it with recursion, memoisation, tabulation and then space optimised tabulation.
This solution can handle both arr having +ve or -ve values.

Reason, we have to find maximum sum when if taken x don't take neighbouring element.
*/


/********************************************************************************************************/
PS- Ways to Reach the n'th Stair
There are n stairs, a person standing at the bottom wants to reach the top. 
The person can climb either 1 stair or 2 stairs at a time. 
Count the number of ways, the person can reach the top (order does matter).

/* CODE */
/* MEMOISATION */
class Solution {
    int m=1000000007;
    public int countWays(int n) {
        int[] dp = new int[n + 1];
        return solve(n, 0, dp);
    }
    
    public int solve(int n, int i, int[] dp) {
        if (i == n) return 1;
        if (i > n) return 0;
        if (dp[i] != 0) return dp[i]; // Memoization
        // Explore the two possible jumps
        int jump1 = solve(n, i + 1, dp)%m;
        int jump2 = solve(n, i + 2, dp)%m;
        // Store the result in dp array
        dp[i] = (jump1 + jump2)%m;
        return dp[i];
    }
}

/* RECURSION TLE */
class Solution {
    int m=1000000007;
    public int countWays(int n) {
        int[] dp = new int[n + 1];
        return solve(n);
    }
    
    public int solve(int n) {
        if(n<=1) return 1;
        return (solve(n-1) + solve(n-2))%m;
    }
}

/* MEMOISATION */
class Solution {
    int m=1000000007;
    public int countWays(int n) {
        int[] dp = new int[n + 1];
        return solve(n, dp);
    }
    
    public int solve(int n, int dp[]) {
        if(n<=1) return 1;
        if(dp[n]!=0) return dp[n];
        return dp[n]=(solve(n-1, dp) + solve(n-2, dp))%m;
    }
}


/*****************************************************************************************************/
PS- Count ways to N'th Stair(Order does not matter)
Count the number of ways, the person can reach the top (order does not matter).
Note: Order does not matter means for n = 4:- {1 2 1},{2 1 1},{1 1 2} are considered same.

/* CODE */
/* MEMOISATION */
class Solution {
    public int nthStair(int n){
        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);
        return solve(n, dp);
    }
    
    public static int solve(int i, int dp[]){
        if(i==0) return 1;
        if(i<0) return 0;
        if(dp[i]!=-1) return dp[i];
        int jump1=solve(i-1, dp);
        int jump2=solve(i-2, dp);
        return dp[i]= 1+ Math.min(jump1,jump2);
    }
}

/*
LOGIC---
By travelling from bottom to top, we are gettign unique combos
*/

/* RECURSION BACKTRACKING TLE */
class Solution {
    public int nthStair(int n){
        HashSet<ArrayList<Integer>> set = new HashSet<>();
        solve(n, 0, new ArrayList<Integer>(), set);
        return set.size();
    }
    
    public static void solve(int n, int i, ArrayList<Integer> list, HashSet<ArrayList<Integer>> set){
        if(i==n){
            ArrayList<Integer> temp = new ArrayList<>(list);
            Collections.sort(temp);
            if(!set.contains(temp)) set.add(temp);
            return;
        }
        if(i>n) return;
        list.add(1);
        solve(n, i+1, list, set);
        list.remove(list.size()-1);
        list.add(2);
        solve(n,i+2, list, set);
        list.remove(list.size()-1);
    }
}

/*
Note---
Ordering of ways does not matter. So, use hashset
*/

/* TABULATION */
class Solution {
    public int nthStair(int n) {
        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);
        dp[0]=1;
        dp[1]=1;
        for(int i=2; i<=n; i++){
            dp[i] = 1 + Math.min(dp[i-1], dp[i-2]);
        }
        return dp[n];
    }
}

/*
LOGIC---
the logic used in the for loop is based on finding the minimum steps to reach the nth stair, 
rather than counting all unique combinations of steps where the order doesn't matter.
*/

/* MAGIC SOLUTION ONE LINER */
class Solution {
    public int nthStair(int n) {
        return n/2 +1;
    }
}

/*
LOGIC---
if we fix the number of steps of size 1 then a combination is possible only if the remaining length of stairs is even. 
So, we just need to find the number of even numbers between 0 and m which turn out to be m/2+1.

simply return (n/2)+1 as for every n we can represent it in multiple to 2 like for n = 1 (1+0*2), n=2 (1+1+0*2 or 0+1*2) etc
*/



