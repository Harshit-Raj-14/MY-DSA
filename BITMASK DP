PS- Minimum Remaining Boys - 1 (GFG contest 168)

You are given the positions of n boys and n girls on a 2D grid. 
The positions are represented by 2D arrays of size n*2:
• boys where boys [i] [0] and boys [i] [1] represent the x and y coordinates of the ith boy.
• girls where girls[j] [0] and girls [j] [1] represent the x and y coordinates jth girl. of the j
A girl can meet a boy and form a pair if and only if both the x and y coordinates of the boy are smaller than those of the girl. Each boy can meet at most one girl and vice versa. Return the minimum number of boys who would be unable to pair after all possible meetings.

Constraint: 1<n<=16; 0<=boys[i][j],girls[i][j]<10^6
Input: n = 2, boys = [[1,1], [3,3]], girls = [[2,2],[4,4]]
Output: 0 (no boys left after pairing)

/* CODE */
/* MEMOISATION DP */
class Solution {
    public static int minRemaining(int n, int[][] boys, int[][] girls){
        int dp[][] = new int[n][(1<<n)+1];
        for(int row[] : dp) Arrays.fill(row, -1);
        int pairs=solve(boys, girls, 0, 0, dp); //no of boys used
        return n-pairs;
    }
    
    public static int solve(int[][] boys, int[][] girls, int idx, int bit, int dp[][]){
        if(idx>=boys.length) return 0;  //no of boys over, but girls still left => not possible
        if(dp[idx][bit]!=-1) return dp[idx][bit];
        int x=boys[idx][0]; //coordinates of boy 
        int y=boys[idx][1];
        int ans=solve(boys, girls, idx+1, bit, dp);  //case where current boy is not paired
        for(int i=0;i<girls.length;i++){    //case boy is selected, try to match with each girl
            if((bit&(1<<i)) > 0) continue;   //girl already paired
            if(x<girls[i][0] && y<girls[i][1]){ //fulfilling condition
                bit = bit | (1<<i); //marking the girl as 1 in bitmask  at i-th bit(i index)=> used
                ans=Math.max(ans, 1 + solve(boys, girls, idx+1, bit, dp));
                bit=bit^(1<<i); //backtracking the bit, let's choose another girl if possible => make it 0(available)
            }
        }
        return dp[idx][bit]=ans;
    }
}


/* 
LOGIC---
NP complete problem
Polynomial solution exists
DP with bitmask => DP on susbset optimised by bitmask => Converts O(n!) -> O(2^n)

Since n constraint is 15 => 1111 (binary) needed

idx -> iterate over boys
bit -> bit mask -> to keep count of girls used since there can be max 15 girls(in binary we need upto 1111, 4 bits)

The bitmask is used in this algorithm to efficiently track which girls have already been paired with boys during the recursive calls.

Since all girls needs to be used. We check possiblitty of choosing a boy or not.
If boy choosen, now check possiblity of trying to pair him with each gil in subsequent recursion flow.

Now to maintain the ccorrect girl used, we use a bit mask. Since constraitn is of n<=16. 
We can use upto 32 bits. Each ith bit represent ith index which can be turned into a set bit to show the girl is used.
And then again backtrack on it.

TC- O(2^n*(n^2)) => n*(2^n) states(n boys and 2^n bitmasks) and then we run a loop of size n for girls
SC - O(2^n*(n^2)) => size of dp array


## Size of dp array[][] 
First Dimension (n): This represents the index of the current boy being considered. 
Since there are n boys, the first dimension of the dp array is n.

Second Dimension ((1 << n) + 1) => (2^n +1) => This represents all possible states of pairing the boys with the girls. 
Each state is a unique bitmask, where each bit indicates whether a particular girl has been paired.

Why (1 << n) + 1?
Bitmask Representation: The bitmask needs n bits to represent the pairing status of all n girls. 
For example, if n = 3, the possible bitmasks range from 000 (no girls paired) to 111 (all three girls paired), 
which are 2^3 = 8 states.
The +1 ensures that all possible bitmask states are covered, for safety.(like including all 000... state.    
    
    
## Why use bit mask dp?
Space Efficiency: A bitmask uses a single integer to represent the state of multiple elements (like girls in this case). 
For example, if you have 10 girls, you can represent whether each girl is paired using a 10-bit integer (0 or 1 for each girl). 
This is much more space-efficient than using an array of booleans to keep check which girl was used and would take additional O(n) space, 
especially as the number of girls increases.

While in bitmask we only need an integer which is O(1) space.
Also, bit operations are faster.

What happens if n becomes 100?
Even DP will give TLE. At that time it becoems an implementation problem of graph. Minimum Remaining Boys - 1
*/


/* RECURSION TLE */
class Solution {
    public static int minRemaining(int n, int[][] boys, int[][] girls) {
        int pairs=solve(boys, girls, 0, 0); //no of boys used
        return n-pairs;
    }
    
    public static int solve(int[][] boys, int[][] girls, int idx, int bit){
        if(idx>=boys.length) return 0;  //no of boys over, but girls still left => not possible
        int x=boys[idx][0]; //coordinates of boy 
        int y=boys[idx][1];
        int ans=solve(boys, girls, idx+1, bit);  //case where current boy is not paired
        for(int i=0;i<girls.length;i++){    //case boy is selected, try to match with each girl
            if((bit&(1<<i)) > 0) continue;   //girl already paired
            if(x<girls[i][0] && y<girls[i][1]){ //fulfilling condition
                bit = bit | (1<<i); //marking the girl as 1 in bitmask  at i-th bit(i index)=> used
                ans=Math.max(ans, 1 + solve(boys, girls, idx+1, bit));
                bit=bit^(1<<i); //backtracking the bit, let's choose another girl if possible => make it 0(available)
            }
        }
        return ans;
    }
}

/****************************************************************************************************/
PS- 1879. Minimum XOR Sum of Two Arrays
You are given two integer arrays nums1 and nums2 of length n.
The XOR sum of the two arrays is (nums1[0]^nums2[0]) + (nums1[1]^nums2[1]) +...+ (nums1[n - 1]^nums2[n - 1]).
For example, the XOR sum of [1,2,3] and [3,2,1] is equal to (1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4.
Rearrange the elements of nums2 such that the resulting XOR sum is minimized.
Return the XOR sum after the rearrangement.

/* CODE */
/* BITMASK DP MEMOIZATION O(n*2^n), O(2^n) */
class Solution {
    public int minimumXORSum(int[] nums1, int[] nums2) {
        int mask=0;
        int dp[] = new int[1<<nums1.length];
        Arrays.fill(dp, -1);
        return solve(nums1, nums2, 0, mask, dp);
    }

    public static int solve(int nums1[], int nums2[], int i, int mask, int dp[]){
        if(i>=nums1.length) return 0;
        if(dp[mask]!=-1) return dp[mask];
        int ans = Integer.MAX_VALUE;
        for(int j=0;j<nums2.length;j++){
            if(((mask>>j)&1)!=1){
                int curr = (nums1[i]^nums2[j]) + solve(nums1, nums2, i+1, mask|(1<<j), dp);
                ans = Math.min(ans, curr);
            }
        }
        return dp[mask]=ans;
    }
}

/*
LOGIC---
TC - O(n*2^n)
For i, there are n states.
For mask, there are 2^n states.

SC-  O(2^n)
*/

/* BITMASK DP RECURSION O(n*n!) */
class Solution {
    public int minimumXORSum(int[] nums1, int[] nums2) {
        int mask=0;
        return solve(nums1, nums2, 0, mask);
    }

    public static int solve(int nums1[], int nums2[], int i, int mask){
        if(i>=nums1.length) return 0;
        int ans = Integer.MAX_VALUE;
        for(int j=0;j<nums2.length;j++){
            if(((mask>>j)&1)!=1){
                int curr = (nums1[i]^nums2[j]) + solve(nums1, nums2, i+1, mask|(1<<j));
                ans = Math.min(ans, curr);
            }
        }
        return ans;
    }
}

/*
LOGIC---
WHY dp size int[1<<nums2.length] ?
Since each of the n bits can be either 0 or 1, there are 2^n possible bitmasks. Therefore, to store the results for all possible bitmasks, the size of the dp array must be at least 2^n.

Use bitmask dp since the size of n is till 14 we can use a mask instead of a boolean array to store elements of nums2 which we have already utilised.

APPROACH---
While iterating in nums1, we check every possiblity of taking every element from nums2 against nums1.

Note- Remember to use this brackets (a[i] ^ b[j]) as the author have else you will get WA because of the precedence. How do I know this ? Because I couldn't solve this problem just because of this issue.
*/


/* WITHOUT BITMASK DP */
class Solution{
    public int minimumXORSum(int[] nums1, int[] nums2) {
        HashMap<String, Integer> map = new HashMap<>();
        boolean arr[] = new boolean[nums2.length];
        return solve(nums1, nums2, 0, arr, map);
    }
    
    public static int solve(int nums1[], int nums2[], int i, boolean[] arr, HashMap<String, Integer> map){
        if(i == nums1.length) return 0;
        String key = Integer.toString(i);
        for(int k = 0; k < nums1.length; k++){
            if(arr[k]) key += "#" + Integer.toString(k);
        }
        if(map.containsKey(key)) return map.get(key);
        int ans = Integer.MAX_VALUE;
        for(int j = 0; j<nums2.length; j++) {
            if(!arr[j]) {
                arr[j] = true;
                ans = Math.min(ans, (nums1[i] ^ nums2[j]) + solve(nums1, nums2, i+1, arr, map));
                arr[j] = false;
            }
        }
        map.put(key, ans);
        return ans;
    } 
}


/*************************************************************************************************/
PS- 464. Can I Win
Given two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, 
otherwise, return false. Assume both players play optimally.
For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.

/* MEMOISATION */
class Solution {
    public boolean canIWin(int n, int t) {
        if (t <= 0 || n >= t) return true;  
        int totalsum = n*(n+1)/2;     
        if (totalsum < t) return false;
        Map<Integer, Boolean> memo = new HashMap<>();
        int mask = 0;
        return solve(n, t, mask, memo);
    }

    public static boolean solve(int n, int t, int mask, Map<Integer, Boolean> memo) {
        if (memo.containsKey(mask)) return memo.get(mask);
        for (int i=1; i<=n; i++) {
            if (((mask>>i)&1)==0) {
                if(t-i<=0){
                    memo.put(mask, true);  
                    return true;
                } 
                boolean secondPlayerCanWin = solve(n, t - i, mask^(1<<i), memo);
                if (!secondPlayerCanWin) {
                    memo.put(mask, true);  
                    return true;
                }
            }
        }
        memo.put(mask, false);  
        return false;
    }
}

/* RECURSION TLE */
class Solution {
    public boolean canIWin(int n, int t) {
        //check if it's even possible for our players to reach target
        if(t<=0 || n>=t) return true;    //first player always wins
        int totalsum=n*(n+1)/2; //from 1 to n all numbers chosen by both plyer each turn
        if(totalsum<t) return false;
        int mask=0;
        return solve(n, t, mask);
    }

    public static boolean solve(int n, int t, int mask){
        for(int i=1;i<=n;i++){
            if(((mask>>i)&1)==0){   //number i not in mask => available
                //first player makes move
                if(t-i<=0) return true;
                //second player makes a move if first player fails
                boolean secondplayer = solve(n, t-i, mask^(1<<i));
                if(!secondplayer) return true; //read logic for this - if second player fails, first player got a chance to win
            }
        }
        return false;   //first player never won
    }
}


/*
LOGIC---
Why bitmask?
The recursion can be very deep. everytime the person choose between 1 and n. then you also need to know which number was already chosen so that player does not choose it again.
If you used array in each recursion it can be very deep and a lot of array will be created each recursion.
Instead, use a mask, utilizing O(1) space.
If you see constraints its like almost asking us to use bitmask.
So, the number utilised, we will use it as index and in our mask mark it as 1 to show its used.

So, do the reucrsion and keept turns in mind.
 Add numbrs to bitmask but also don't forget to backtrack it.
 Or, rather include the masking process in recursion itself.

Why 
there is a theorem in game theory (I quote it from wikipedia)
"In game theory, Zermelo’s theorem, says that in any finite two-person game of perfect information in which the players move alternatingly and 
in which chance does not affect the decision making process, if the game cannot end in a draw, then one of the two players must have a winning strategy (i.e. force a win)."

Since the game we are talking about will always have a winner, we can force out a win from player 2 if he loses in first instance, afte everytime given a chance.
*/


