Basics of react
JSX
Components - functional and class
Virtual DOM
Props 
state

Dynamic and static website

REACT HOOKS-
React Hooks are functions that let you use React state and lifecycle features inside functional components. 
Before Hooks, state and other React features were only available in class components. Hooks were introduced in React 16.8 and they offer a simpler way to build components with features like state management, side effects, and context.

React Hooks Use features of the React framework by calling special hook functions from within a component. 
We can build static or dumb components in React by writing functions. However, UI components are often dynamic. 
They may need to change the state of their data, react to lifecycle events, access elements from the DOM, among many other things. 
But prior to React v16.8, developers were required to write classes to take advantage of certain React features.

Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.

Using hooks we can insert logic and reactivity in our application

There are 10 hooks:
1. Basic Hooks
    useState
    useEffect
    useContext

2. Additional Hooks
    useReducer
    useCallback
    useMemo
    useRef
    useImperativeHandle
    useLayoutEffect

3. Custom Hooks


React Hooks are functions that allow you to use state and other React features in functional components. Before hooks, stateful logic was only possible in class components. Hooks were introduced in React 16.8 to provide a cleaner and more intuitive way of handling state and side-effects in functional components. 

Preety basic things:
All hooks starts with the word use
=> you need to call all hooks at the top level of the component. you cannot use them in loops, or nested function
the only exception is the custom hooks


Why hooks?
React react karti hai variable ke updation pe
Previously in js, to update you will have to take so many refrences liek document get emelemnt by id then get refnerece and then chang ethe variable values
React makes this thing very easy in few line sof code, that's why this is not a framework but a js library
React tries to control UI updation on its own, to React react karti hai variable ke updation pe


//COUNTER PROJECT WITHOUT HOOKS
import React from "react";

function Counter() {
  let count = 0;

  const increment = () => {
    count++;
    console.log("Counter:", count);
  };

  return (
    <div>
      <h1>Counter: {count}</h1>
      <button onClick={increment}>Add</button>
    </div>
  );
}

export default Counter;


Notice - the count wont change on clicking button, but if you check console the variable is updated.
So, that's where hooks come into play where we need to show how to actually update counter in UI

///////////////////////////////////////////////////
npx create-react-app hooks-tutorial
cd react-hooks-tutorial
npm start
///////////////////////////////////////////////////
useState Hook – Manage state in functional components
=> to handle reactive data
=> when data changes it re-renders the UI

useState(0) => we begin with calling usestate function and then set a default value 0
By default the return value of this function is an array with two values
const [count, setCount] = useState(0);
count => reactive value
setCount = setter
//Note : the above statment utilises destructuring => how count and setCount are directly assigned to that position in array
count = arr[0];
setCount = arr[1];

So, when you apply any changes to the above value, react will aurtomatically rebuild the ui to flash a new value
Like a like button

It is the most common hook in react which creates the state variable in a functional component.

const [state, setState] = useState(initialState);

To use it you can pass any value or function as an initial state and it returns an array of two entities, the first element is the initial state and the second one is a function (dispatcher) which is used to update the state.

Why not class componente?
First we would have to make a class to extend a react compnente like a button, then make a constructor to intialise a state and then the entire code will be filled with this keyword references
So, usestate make it more simple and easy to use


## Counter APP
import React, { useState } from 'react';

const CounterApp = () => {
  const [count, setCount] = useState(0);

  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);
  const reset = () => setCount(0);

  return (
    <div>
      <h1>Counter: {count}</h1>
      <button onClick={increment}>Increment</button>
        <button onClick={decrement}>Decrement</button>
      <button onClick={reset}>Reset</button>
    </div>
  );
};

export default CounterApp;


///////////////////////////////////////////////////////
useEffect Hook – Handle side effects
component Life Cycle
componentDidMount{
//intialise => ON state
}

componentDidUpdate{
//state update => working logic state
}

componentWillUnmount{
//destroy => off state
}

=> useEffect allows us to implement logic for all the life cycle steps through just one single function. Thats the actual power of useffect
=> so it runs each time a state is updated ( run when mounted/ when state changes => like  calling an API)
=> Note  :add an empty array at end => , []); // empty dependency array ensures this runs once when the component mounts

The useEffect hook allows you to perform side effects in function components. Side effects include data fetching, subscribing to event handlers, manual DOM mutations, timers, etc. 
By using this Hook, you tell React that your component needs to do something after render.

useEffect allows you to perform side effects in function components. 
These include data fetching, subscriptions, or manually changing the DOM.

Project : Counter alert
import React, { useState, useEffect } from 'react';

const CounterApp = () => {
  const [count, setCount] = useState(0);
  const [message, setMessage] = useState('');

  const increment = () => {
    setCount(count + 1);
    setMessage('You increased the counter.');
  };

  const decrement = () => {
    setCount(count - 1);
    setMessage('You decreased the counter.');
  };

  // useEffect to alert the message on count change
  useEffect(() => {
    if (message) {
      alert(message);
    }
  }, [message]); // This effect runs whenever 'message' changes

  return (
    <div>
      <h1>Counter: {count}</h1>
      <button onClick={increment}>Increment</button>
      <button onClick={decrement}>Decrement</button>
    </div>
  );
};

export default CounterApp;


////////////////////////////////////////////////////////////////
useContext Hook – Share state between components without prop drilling
=> work with context in react
=> share data without using props
The useContext hook allows you to share state across components by avoiding "prop drilling" (passing props down multiple levels).
=> eg: you cna ge tthe current count in a counting project

Mini Project 3: Theme Context Switcher

Create a light/dark theme switcher that works across the entire app.

import React, { useState, createContext, useContext } from 'react';

// Create a ThemeContext
const ThemeContext = createContext();

const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('light');

  const toggleTheme = () => {
    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

// Button component that uses the ThemeContext
const ThemeButton = () => {
  const { theme, toggleTheme } = useContext(ThemeContext);
  return (
    <button onClick={toggleTheme}>
      Current Theme: {theme} (Click to toggle)
    </button>
  );
};

// App component that wraps everything inside ThemeProvider
const App = () => {
  return (
    <ThemeProvider>
      <div>
        <h1>Theme Context Example</h1>
        <ThemeButton />
      </div>
    </ThemeProvider>
  );
};

export default App;


Here, useContext is used to access the theme state and the toggle function within components, without passing them as props.

////////////////////////////////////////////////////////////////////////
useReducer Hook – Manage complex state logic
=> a different way to mange state, just like useState
=> instead of updating state directly
it follows steps : action -> reducer -> store -> UI

const [state, dispatch] = useReducer();
=> it has an action and dispatcher as well
useReducer is used for more complex state logic than useState. It's similar to Redux, where a reducer function handles actions.
Mini Project 4: Todo List with Reducer

We'll create a simple Todo List app that uses useReducer for managing the todo state.


import React, { useReducer, useState } from 'react';

const todoReducer = (state, action) => {
  switch (action.type) {
    case 'ADD_TODO':
      return [...state, { text: action.text, completed: false }];
    case 'TOGGLE_TODO':
      return state.map((todo, index) =>
        index === action.index ? { ...todo, completed: !todo.completed } : todo
      );
    case 'REMOVE_TODO':
      return state.filter((_, index) => index !== action.index);
    default:
      return state;
  }
};

const TodoApp = () => {
  const [todos, dispatch] = useReducer(todoReducer, []);
  const [text, setText] = useState('');

  const addTodo = () => {
    dispatch({ type: 'ADD_TODO', text });
    setText('');
  };

  return (
    <div>
      <h1>Todo List</h1>
      <input
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="Enter todo"
      />
      <button onClick={addTodo}>Add Todo</button>
      <ul>
        {todos.map((todo, index) => (
          <li
            key={index}
            style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}
          >
            {todo.text}
            <button onClick={() => dispatch({ type: 'TOGGLE_TODO', index })}>
              Toggle
            </button>
            <button onClick={() => dispatch({ type: 'REMOVE_TODO', index })}>
              Remove
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TodoApp;


/////////////////////////////////////////////////////////////////
useMemo Hook – Optimize performance
=> optimise computation cost, by caching results of function calls
=> to deal with expensive computation

useMemo is used to memoize the result of a function and recalculate it only when its dependencies change. This helps in preventing unnecessary recalculations.
Mini Project 5: Expensive Calculation

We'll create a small app that performs an expensive calculation and uses useMemo to optimize performance.

jsx

import React, { useState, useMemo } from 'react';

const ExpensiveCalculation = (num) => {
  console.log('Calculating...');
  for (let i = 0; i < 1000000000; i++) {}
  return num * 2;
};

const MemoApp = () => {
  const [number, setNumber] = useState(0);
  const [theme, setTheme] = useState('light');

  const doubleNumber = useMemo(() => ExpensiveCalculation(number), [number]);

  const toggleTheme = () => {
    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));
  };

  return (
    <div>
      <h1 style={{ color: theme === 'light' ? 'black' : 'white' }}>
        The number is: {doubleNumber}
      </h1>
      <input
        type="number"
        value={number}
        onChange={(e) => setNumber(parseInt(e.target.value))}
      />
      <button onClick={toggleTheme}>
        Toggle Theme
      </button>
    </div>
  );
};

export default MemoApp;

useMemo ensures that the expensive calculation only runs when number changes, not when the theme is toggled.


/////////////////////////////////////////////////////////////////////
useCallback
The useCallback hook is used to memoize a callback function. It helps in optimizing performance by preventing unnecessary re-rendering of components that depend on the callback.


//// RANDOM JOKE GEENRATOR ////
import React, { useState, useEffect } from "react";

function JokeGenerator() {
  const [joke, setJoke] = useState("");

  const fetchJoke = async () => {
    const response = await fetch("https://v2.jokeapi.dev/joke/Any?type=single");
    const data = await response.json();
    setJoke(data.joke);
  };

  useEffect(() => {
    fetchJoke();
  }, []);

  return (
    <div style={{ textAlign: "center", marginTop: "50px" }}>
      <h1>Random Joke Generator</h1>
      <p>{joke}</p>
      <button onClick={fetchJoke}>Get Another Joke</button>
    </div>
  );
}

export default JokeGenerator;


//////////////////////////////////////////////////////////
MINI PROJECT RANDOM USER DISPLAY

import React, { useState, useEffect } from 'react';

const FetchUserData = () => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    fetch('https://randomuser.me/api/')
      .then((response) => response.json())
      .then((data) => {
        setUser(data.results[0]);
      });
  }, []); // empty dependency array ensures this runs once when the component mounts

  return (
    <div>
      {user ? (
        <div>
          <h2>{`${user.name.first} ${user.name.last}`}</h2>
          <p>{user.email}</p>
        </div>
      ) : (
        <p>Loading user...</p>
      )}
    </div>
  );
};

export default FetchUserData;