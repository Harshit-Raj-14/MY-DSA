THEORY----
rolling hash (Rabin-Karp algorithm)


/*******************************************************************************************************/
PS- 718. Maximum Length of Repeated Subarray
Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.

/* CODE */
/* DP LCS O(n^2) */
class Solution {
    public int findLength(int[] arr1, int[] arr2){
        int dp[][] = new int[arr1.length+1][arr2.length+1];
        int ans=0;
        for(int i=1;i<dp.length;i++){
            for(int j=1;j<dp[0].length;j++){
                if(arr1[i-1]==arr2[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                    ans=Math.max(ans, dp[i][j]);
                }
                else dp[i][j]=0;
            }
        }
        return ans;
    }
}

/*
LOGIC---
Simply apply LCS
first row and first column filled with 0

Longest Common Substrign pattern 
*/

/* BINARY SEARCH + ROLLING HASH O(nlogn) */