PS- 763. Partition Labels
We have given an string. And we have to divide strings into partition. But here is one condition :-
"Character's are not present beyond it's partition."

/* CODE */
class Solution {
    public List<Integer> partitionLabels(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for(int i=0;i<s.length();i++){
            map.put(s.charAt(i), i);    //this will update the last index of all characters in map
        }
        ArrayList<Integer> ans = new ArrayList<>();
        int start=0;
        int end=0;
        for(int i=0;i<s.length();i++){
            end=Math.max(end, map.get(s.charAt(i)));
            if(end==i){  //partition time, the characters encountered till now does not exist outside this range
                ans.add(end-start+1);
                start=end+1;
            }
        }
        return ans;

    }
}

/*
LOGIC---
Goal: characters at each partition DOES NOT appear in any other partition then return the length of each one.

why HashMap?
because, we gonna need each & every character index in our hashmap & by that we'll got an idea, from where to partition it.

How to know when to partition?
After storing index of last occurence of each element we get to know where each character ends in string. So, once you start iterating string. The moment current index hits the maximum endpoint of all the characters encountered til now, that means at curr index all the characters we have seen till now will no longer exist in other part of the string. All the characters are till this interval only. This means this here can be our very partition.
Now find length of partition.
Now the next index becomes the start of next partition.

Visual representation : https://leetcode.com/problems/partition-labels/

APPROACH---
=> Create a map that stores the last index of each character in the string.
=> the question now reduces to the other question : "Merge intervals".
=> initialize two variables, "start" and "end", to keep track of the current partition. Set them both to 0 initially.
=> Iterate through the string. 
    ->For each character: update the value of "end" to be the maximum of its current value and the last index of the character in the map.
    ->If the current index is equal to "end", we have found a partition. 
    ->Add its length (which is "end" - "start" + 1) to the list of partition sizes, and update "start" to be the next index.

=> Return the list of partition sizes.

A few optimisation- Instead of hashmap, we can also use int array of length 26.
*/



/************************************************************************************************************/
PS- D. Robert Hood and Mrs Hood (Codeforces Round 974 (Div. 3))
All days are numbered from 1 to n. Visitors stay for d continuous days, all of those d days must be between day 1 and n inclusive.
Robin has a total of k 'jobs' planned. The i-th job takes place between days li and ri inclusive, for 1≤i≤k. 
If a job takes place on any of the d days, the visit overlaps with this job (the length of overlap is unimportant).
Robin wants his brothers visit to overlap with the maximum number of distinct jobs, and his mother's the minimum.
Find suitable start days for the visits of Robin's brother and mother. If there are multiple suitable days, choose the earliest one.

/* CODE */
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();   //total days
            int d = sc.nextInt();   //duration of the visits
            int k = sc.nextInt();   //no of jobs
            HashMap<Integer, Integer> start = new HashMap<>();
            HashMap<Integer, Integer> end = new HashMap<>();
            for (int i = 0; i < k; i++) {
                int l = sc.nextInt();   //start day of job
                int r = sc.nextInt();   //end day of job
                start.put(l, start.getOrDefault(l, 0) + 1); //mutiple jobs can have same start or end days
                end.put(r, end.getOrDefault(r, 0) + 1);
            }
            int overlap = 0;
            int maxOverlap = 0;
            int minOverlap = Integer.MAX_VALUE;
            int bestStartForBro = 1;
            int bestStartForMom = 1;
            for (int i=1; i<=n-d+1; i++) {
                overlap += start.getOrDefault(i + d - 1, 0);    //job starting so add
                overlap -= end.getOrDefault(i - 1, 0);      //job ending so subtract
                if (overlap > maxOverlap) {
                    maxOverlap = overlap;
                    bestStartForBro = i;
                }
                if (overlap < minOverlap) {
                    minOverlap = overlap;
                    bestStartForMom = i;
                }
            }
            System.out.println(bestStartForBro + " " + bestStartForMom);
        }
        sc.close();
    }
}

/*
LOGIC---
When brother or mother arrives for d days:
For brother -> no of jobs overlapping his stay should be max 
For mother -> no of jobs overlapping her stay should be least

sliding window 

*/

/********************************************************************************************************/
