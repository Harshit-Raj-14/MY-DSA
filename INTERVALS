PS- 763. Partition Labels
We have given an string. And we have to divide strings into partition. But here is one condition :-
"Character's are not present beyond it's partition."

/* CODE */
class Solution {
    public List<Integer> partitionLabels(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for(int i=0;i<s.length();i++){
            map.put(s.charAt(i), i);    //this will update the last index of all characters in map
        }
        ArrayList<Integer> ans = new ArrayList<>();
        int start=0;
        int end=0;
        for(int i=0;i<s.length();i++){
            end=Math.max(end, map.get(s.charAt(i)));
            if(end==i){  //partition time, the characters encountered till now does not exist outside this range
                ans.add(end-start+1);
                start=end+1;
            }
        }
        return ans;

    }
}

/*
LOGIC---
Goal: characters at each partition DOES NOT appear in any other partition then return the length of each one.

why HashMap?
because, we gonna need each & every character index in our hashmap & by that we'll got an idea, from where to partition it.

How to know when to partition?
After storing index of last occurence of each element we get to know where each character ends in string. So, once you start iterating string. The moment current index hits the maximum endpoint of all the characters encountered til now, that means at curr index all the characters we have seen till now will no longer exist in other part of the string. All the characters are till this interval only. This means this here can be our very partition.
Now find length of partition.
Now the next index becomes the start of next partition.

Visual representation : https://leetcode.com/problems/partition-labels/

APPROACH---
=> Create a map that stores the last index of each character in the string.
=> the question now reduces to the other question : "Merge intervals".
=> initialize two variables, "start" and "end", to keep track of the current partition. Set them both to 0 initially.
=> Iterate through the string. 
    ->For each character: update the value of "end" to be the maximum of its current value and the last index of the character in the map.
    ->If the current index is equal to "end", we have found a partition. 
    ->Add its length (which is "end" - "start" + 1) to the list of partition sizes, and update "start" to be the next index.

=> Return the list of partition sizes.

A few optimisation- Instead of hashmap, we can also use int array of length 26.
*/


/*****************************************************************************************************/
PS- 56. Merge Intervals
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, 
and return an array of the non-overlapping intervals that cover all the intervals in the input.

/* CODE */
class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a,b) -> Integer.compare(a[0], b[0]));       //Arrays.sort(intervals, (a,b) -> a[0] - b[0]);
        int merged[][] = new int[intervals.length][2];
        int i=0;
        merged[i]=intervals[0]; //first row of merged is set to first row of intervals
        for(int j=1;j<intervals.length;j++){
            if(merged[i][1]>=intervals[j][0]){  //y1>=x2
                merged[i][1]=Math.max(merged[i][1], intervals[j][1]);   //make y1->y2
            }
            else{
                i++;
                merged[i]=intervals[j];
            }
        }
        return Arrays.copyOf(merged, i+1); //creates a new merged that contains the first i+1 elements of the merged
    }
}

/*
LOGIC---
If we sort the intervals by their start value, then each set of intervals that can be merged will appear as a contiguous "run" in the sorted list.
If they do, we merge them; if not, we simply move on to the next interval.

We have intervals given:
(x1,y1),(x2,y2) => sorted by x1
Inteval overlap: y1>=x2 => overlap => merge intervals : (x1,y2)
otherwise start to check next interval

Approach---
    Sort the Intervals: We begin by sorting the intervals based on their start time.
    Initialize Merged List: Create a new list to store the merged intervals.
    Iterate and Merge: Start with the first interval, then for each subsequent interval:
        -If it overlaps with the last interval in the merged list, merge them by updating the end time.
        -If it doesn't overlap, add it to the merged list as a new interval.
    Return the Result: Finally, we return the list of merged intervals.

Time complexity : O(nlogn)
Space complexity : O(logN) or O(n)
If we can sort intervals in place, we do not need more than constant additional space, although the sorting itself takes O(logn) space. Otherwise, we must allocate linear space to store a copy of intervals and sort that.
*/

/************************************************************************************************************/
PS- D. Robert Hood and Mrs Hood (Codeforces Round 974 (Div. 3))
All days are numbered from 1 to n. Visitors stay for d continuous days, all of those d days must be between day 1 and n inclusive.
Robin has a total of k 'jobs' planned. The i-th job takes place between days li and ri inclusive, for 1≤i≤k. 
If a job takes place on any of the d days, the visit overlaps with this job (the length of overlap is unimportant).
Robin wants his brothers visit to overlap with the maximum number of distinct jobs, and his mother's the minimum.
Find suitable start days for the visits of Robin's brother and mother. If there are multiple suitable days, choose the earliest one.

/* CODE */
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();   //total days
            int d = sc.nextInt();   //duration of the visits
            int k = sc.nextInt();   //no of jobs
            HashMap<Integer, Integer> start = new HashMap<>();
            HashMap<Integer, Integer> end = new HashMap<>();
            for (int i = 0; i < k; i++) {
                int l = sc.nextInt();   //start day of job
                int r = sc.nextInt();   //end day of job
                start.put(l, start.getOrDefault(l, 0) + 1); //mutiple jobs can have same start or end days
                end.put(r, end.getOrDefault(r, 0) + 1);
            }
            int overlap = 0;
            int maxOverlap = 0;
            int minOverlap = Integer.MAX_VALUE;
            int bestStartForBro = 1;
            int bestStartForMom = 1;
            for (int i=1; i<=n-d+1; i++) {
                overlap += start.getOrDefault(i + d - 1, 0);    //job starting so add
                overlap -= end.getOrDefault(i - 1, 0);      //job ending so subtract
                if (overlap > maxOverlap) {
                    maxOverlap = overlap;
                    bestStartForBro = i;
                }
                if (overlap < minOverlap) {
                    minOverlap = overlap;
                    bestStartForMom = i;
                }
            }
            System.out.println(bestStartForBro + " " + bestStartForMom);
        }
        sc.close();
    }
}

/*
LOGIC---
When brother or mother arrives for d days:
For brother -> no of jobs overlapping his stay should be max 
For mother -> no of jobs overlapping her stay should be least

sliding window 

*/

/*****************************************************************************************************/
PS- 2406. Divide Intervals Into Minimum Number of Groups
ou are given a 2D integer array intervals[i] = [lefti, righti].
You have to divide the intervals into groups such that each interval is in exactly one group, 
and no two intervals that are in the same group intersect each other.
Return the minimum number of groups you need to make.

Input: intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]
Output: 3
Explanation: We can divide the intervals into the following groups:
- Group 1: [1, 5], [6, 8].
- Group 2: [2, 3], [5, 10].
- Group 3: [1, 10].

/* CODE */
/* DIFFERENCE ARRAY TECHNIQUE Line Sweep Algorithm O(n) */
class Solution {
    public int minGroups(int[][] intervals) {
        int rangeStart = Integer.MAX_VALUE;
        int rangeEnd = Integer.MIN_VALUE;
        for (int[] interval : intervals) {
            rangeStart = Math.min(rangeStart, interval[0]);
            rangeEnd = Math.max(rangeEnd, interval[1]);
        }
        int[] diff = new int[rangeEnd+2]; //for the last interval time we need to put -1, so need extra time
        for (int interval[] : intervals){   //difference array technique
            diff[interval[0]]++; // Increment at the start of the interval
            diff[interval[1] + 1]--; // Decrement right after the end of the interval
        }
        int overlap = 0;
        int maxoverlap = 0;
        for (int i=rangeStart; i<=rangeEnd; i++) {
            overlap += diff[i];
            maxoverlap = Math.max(maxoverlap, overlap);
        }
        return maxoverlap;
    }
}

/*
LOGIC---
same as  Meeting Rooms II
Our goal is to divide the intervals into multiple groups such that each interval belongs to exactly one group and no intervals within the same group overlap. We need to minimize the number of groups created.

Consider making a difference array.
At start do +1
and (end time+1) do -1

Now if you take sum the value gives overlapped rooms/intervals at that point. And we can can find a maxoverlap while iterating.
This max_overlap will infact be the number of groups created int toal since they can't be put together.

No of non-overlap groups = total number of overlapping intervals
*/

/* SORTING O(nlogn) */
class Solution {
    public int minGroups(int[][] intervals) {
        int n = intervals.length;
        int[] start_times = new int[n];
        int[] end_times = new int[n];
        for (int i = 0; i < n; i++){ //Extract start and end times
            start_times[i] = intervals[i][0];
            end_times[i] = intervals[i][1];
        }
        Arrays.sort(start_times);
        Arrays.sort(end_times);
        int end_ptr = 0;
        int ans = 0;
        for (int start : start_times) {
            if (start > end_times[end_ptr]) end_ptr++;
            else ans++;
        }
        return ans;
    }
}

/*
LOGIC---
We need to group intervals so that no intervals in the same group overlap. 

By sorting start and end times, we can track how many intervals overlap at any point. If a new interval starts after an earlier one ends, we can reuse that group. Otherwise, we need a new group.

Sort start time and end time.
If start2>end1 only then they are non-overlap. So we can use start1 and append it with end2 as one group.
But if we encounter  start2<=end1, means they will overlap. So start a new group.

Why it's possible to sort the start time and end time separately—doesn't their pairing matter? 
If we look at two intervals, say [2, 3] and [1, 5], and you draw them on a number line, you'll notice that it makes no difference if you swap them to [1, 3] and [2, 5], because they only overlap between [2, 3], while they're separate in the intervals [1, 2) and (3, 5].
*/


/******************************************************************************************************/
PS- 1942. The Number of the Smallest Unoccupied Chair
You have times[]=[arrival, leaving] given of arrival and departure of guests. All arrival time are distinct.
Tell on which chair your friend will sit, if guests come and occupy the first empty chair.

Input: times = [[1,4],[2,3],[4,6]], targetFriend = 1
Output: 1
Explanation: 
- Friend 0 arrives at time 1 and sits on chair 0.
- Friend 1 arrives at time 2 and sits on chair 1.
- Friend 1 leaves at time 3 and chair 1 becomes empty.
- Friend 0 leaves at time 4 and chair 0 becomes empty.
- Friend 2 arrives at time 4 and sits on chair 0.
Since friend 1 sat on chair 1, we return 1.

/* CODE */
/* SIMULATION BRUTE FORCE O(n^2) */
class Solution {
    public int smallestChair(int[][] times, int friend) {
        int friendarrivaltime = times[friend][0];   //friend arrival time
        Arrays.sort(times, (a, b) -> a[0]-b[0]); // Sorting based on arrival time
        int chairs[] = new int[times.length]; // at max we will have 0 to n-1 chairs
        //simulate the situation
        for(int time[]:times){
            int arrival = time[0];
            int dept = time[1];
            for(int i=0;i<chairs.length;i++){   //check for each guest which chair is free
                if(chairs[i]<=arrival){ //whatever person was seating is going to leave
                    chairs[i]=dept; //make person sit, chair is now occupied and will be free at dept
                    if(arrival == friendarrivaltime) return i;
                    break;
                }
            }
        }
        return -1;
    }
}


/*
LOGIC---
GOAL - Tell on which chair friend will sit.
Get the friend arrival time first so that later we can sort times.
Now you can sort the times, you might have gotten it unsorted.

Now to optmise from checking for each empty by iterating.
Think of a data structure that cna directly return you the empty chair.

MIN-HEAP
We store min heap of chair no. and departure time.
Reason: smaller arrival time when hit we can pop marking chairs as empty.
*/


/********************************************************************************************************/

TODO:
1882. Process Tasks Using Servers

PS- 729. My Calendar I
Make a calendar such that it takes start and end time of current events. But you are cannot double book.
If double book return fasle otherwise add to calendar and return true.

/* CODE */