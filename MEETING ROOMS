PS- N meetings in one room
You are given timings of n meetings in the form of (start[i], end[i]).
Return the maximum number of meetings that can be accommodated in a single meeting room, 
when only one meeting can be held in the meeting room at a particular time. 

/* CODE */
class Solution {
    public int maxMeetings(int start[], int end[]) {
        int intervals[][] = new int[start.length][2];
        for (int i=0; i<start.length; i++) {
            intervals[i][0] = start[i];
            intervals[i][1] = end[i];
        }
        // Sort based on the second element (end time)
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[1], b[1]));
        int limit = intervals[0][1]; // The end time of the first meeting
        int ans = 1; // Count the first meeting
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] > limit) { // If the next meeting starts after the last one ends
                limit = intervals[i][1];   // Update limit to the end time of the current meeting
                ans++;
            }
        }
        return ans;
    }
}

/*
LOGIC---
Say if you have two meetings, one which gets over early and another which gets over late. 
Which one should we choose?  
If our meeting lasts longer the room stays occupied and we lose our time. 
On the other hand, if we choose a meeting that finishes early we can accommodate more meetings. 
Hence we should choose meetings that end early and utilize the remaining time for more meetings.

The idea is to sort the meetings based on their end times. 
We can then greedily select meetings that end early, allowing us to accommodate more meetings overall.

Now make a limit for end time, if the next start time is after limit, we cna take it otherwise see next time.
This works greedily becuase we sorted our intervals, meaning smaller time meetings appear first.
*/

/**************************************************************************************************/
PS- 253 - Meeting Rooms II
Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], 
return the minimum number of conference rooms required.

Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2

/* CODE */
/* DIFFERENCE ARRAY TECHNIQUE Line Sweep Algorithm O(n) */
class Solution {
    public int minGroups(int[][] intervals) {
        int rangeStart = Integer.MAX_VALUE;
        int rangeEnd = Integer.MIN_VALUE;
        for (int interval[] : intervals) {
            rangeStart = Math.min(rangeStart, interval[0]);
            rangeEnd = Math.max(rangeEnd, interval[1]);
        }
        int[] diff = new int[rangeEnd+2]; //for the last interval time we need to put -1, so need extra time
        for (int interval[] : intervals){   //difference array technique
            diff[interval[0]]++; // Increment at the start of the interval
            diff[interval[1] + 1]--; // Decrement right after the end of the interval
        }
        int overlap = 0;
        int maxoverlap = 0;
        for (int i=rangeStart; i<=rangeEnd; i++) {
            overlap += diff[i];
            maxoverlap = Math.max(maxoverlap, overlap);
        }
        return maxoverlap;
    }
}

/*
LOGIC---
same as  2406. Divide Intervals Into Minimum Number of Groups
Our goal is to divide the intervals into multiple groups such that each interval belongs to exactly one group 
and no intervals within the same group overlap. We need to minimize the number of groups created.

Consider making a difference array.
At start do +1
and (end time+1) do -1

Now if you take sum the value gives overlapped rooms/intervals at that point. And we can can find a maxoverlap while iterating.
This max_overlap will infact be the number of groups created in total since they can't be put together.

No of non-overlap groups = total number of overlapping intervals
*/

/* SORTING O(nlogn) */
class Solution {
    public int minGroups(int[][] intervals) {
        int n = intervals.length;
        int[] start_times = new int[n];
        int[] end_times = new int[n];
        for (int i = 0; i < n; i++){ //Extract start and end times
            start_times[i] = intervals[i][0];
            end_times[i] = intervals[i][1];
        }
        Arrays.sort(start_times);
        Arrays.sort(end_times);
        int end_ptr = 0;
        int ans = 0;
        for (int start : start_times) {
            if (start > end_times[end_ptr]) end_ptr++;
            else ans++;
        }
        return ans;
    }
}

/*
LOGIC---
We need to group intervals so that no intervals in the same group overlap. 

By sorting start and end times, we can track how many intervals overlap at any point. If a new interval starts after an earlier one ends, we can reuse that group. Otherwise, we need a new group.

Sort start time and end time.
If start2>end1 only then they are non-overlap. So we can use start1 and append it with end2 as one group.
But if we encounter  start2<=end1, means they will overlap. So start a new group.

Why it's possible to sort the start time and end time separatelyâ€”doesn't their pairing matter? 
If we look at two intervals, say [2, 3] and [1, 5], and you draw them on a number line, you'll notice that it makes no difference if you swap them to [1, 3] and [2, 5], because they only overlap between [2, 3], while they're separate in the intervals [1, 2) and (3, 5].
*/