PS- 1371. Find the Longest Substring Containing Vowels in Even Counts
Given the string s, return the size of the longest substring containing each vowel an even number of times. 

/* CODE */
/* Using map to store states O(n), O(1) */
class Solution {
    public int findTheLongestSubstring(String s) {
        int arr[] = new int[5]; //count array for a,e,i,o,u
        HashMap<String, Integer> map = new HashMap<>();
        String reqstate="00000";    //all even config
        map.put(reqstate,-1);    //0 configuration when at index -1 say
        int ans=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='a') arr[0] = (arr[0]+1) % 2;       //could also do this: arr[0] ^= 1;  // Flip between even/odd for 'a' => its like 1^1^1^...-> odd tiems you still get 1 and evne times you get 0
            else if(s.charAt(i)=='e') arr[1] = (arr[1]+1) % 2;
            else if(s.charAt(i)=='i') arr[2] = (arr[2]+1) % 2;
            else if(s.charAt(i)=='o') arr[3] = (arr[3]+1) % 2;
            else if(s.charAt(i)=='u') arr[4] = (arr[4]+1) % 2;
            String currstate=""+arr[0]+arr[1]+arr[2]+arr[3]+arr[4];
            if(map.containsKey(currstate)) ans=Math.max(ans, i-map.get(currstate));
            else map.put(currstate,i);
        }
        return ans;
    }
}

/*
LOGIC---
Storing states technique
Let's say we have a string S as you move forward iterating we store state configs of vowels we encounter.

How to store these state?
-> we want all vowels to be even => so lets call this state 00000
-> so either the count can be odd or even
if we represent odd by 1 then even will be 0
If we encounter a vowel first time its odd we make it as 1
if we encounter it a second time it becomes 2 even
But if we keep exact count freq it becomes difficult to keep track of huge states.
But our simple goal was 00000 -> all even config
So, we say if its oddth time we mark it as 1
And if we encounter it again it becomes eventh time make it 0
this can be acheived by taking freq%2 at every step

So, our state configuration is decided now.

Why we are working on states?
So, once the state is encountered again what it implies?
The favoravble state for any substring is 00000
So, intially its at -1 no character in consideration. We find state at each step and store it in a map at tis index encountered.
But let's say we have string s="aaa"
So, initiall: 00000 -> -1
at i=0: 10000 -> 0
at i=1: 00000 -> 1 (but we already have it in map) length of substring(favorable all even) = 1-(-1)=2. so at this point it means we have another all even config
at i=2: 10000 -> 2 (but this is already in map) length of substring(with only odd a) = currindex-prevmap stored index = 2-(0) = 2. that means a substring of length 2 exists till now that has odd a.

Now you see how mainting state can help us to derive these kinds of information. it tells whether we encoutnered a certian config or not. Also if its in map which has it stored with the pev index where this config occured. we can get the substring length too.

Now you can maintain these states in form of bitmask, boolean array and what not.


WHY WE NEED TO CHECK OTHER STATES??? VVI
The state "00000" isn't the only state that matters because when the same state repeats at different positions, 
the substring between those positions is valid.

For example, if you encounter a state "01000" (meaning e has an odd count), and later encounter the same state "01000" again, 
the substring between these two occurrences of the state must have an even number of e's and no change in the counts of other vowels, 
which makes it a valid substring as it might have evne count vowels or no vowels. 
So, storing all states helps detect such repeating configurations and find the longest valid substring.


Why sliding window fails?
Since we require even number of each vowel, the window removal or shrinking logic would be very compex to figure out how to shrink the window to keep even number of each vowels.

*/

/* using Mask and Xor property to store states */
class Solution {
    public int findTheLongestSubstring(String s) {
        Map<Integer, Integer> mp = new HashMap<>();
        int mask = 0;
        mp.put(mask, -1);
        int maxL = 0;
        for (int i = 0; i < s.length(); i++) {
            int val = 0;
            if (s.charAt(i) == 'a') val = (1 << 0);
            else if (s.charAt(i) == 'e') val = (1 << 1);
            else if (s.charAt(i) == 'i') val = (1 << 2);
            else if (s.charAt(i) == 'o') val = (1 << 3);
            else if (s.charAt(i) == 'u') val = (1 << 4);
            mask ^= val; //xor 
            if (!mp.containsKey(mask)) mp.put(mask, i); 
            maxL = Math.max(maxL, i - mp.get(mask)); 
        }
        return maxL;
    }
}

/*
LOGIC---
T.C : O(n)
S.C : O(32) ~ O(1) - Maximum 2^5 states possible
*/


/*******************************************************************************************************/
PS- Longest Subarray With Zero Sum 

/* CODE */
/* Using map to store states O(n), O(1) */
public class Solution {
    public static int getLongestZeroSumSubarrayLength(int []arr){
        HashMap<Integer, Integer> map = new HashMap<>();
        int sum=0;
        int ans=0;
        map.put(sum,-1);    //intially sum 0 placed say at -1, no elements taken
        for(int i=0;i<arr.length;i++){
            sum+=arr[i];
            if(map.containsKey(sum)) ans=Math.max(ans, i-map.get(sum));
            else map.put(sum, i);
        }
        return ans;
    }
}

/*
LOGIC---
same as above question -> using state store technique
favorable state is 0
So, put it inititally at -1 => encountering 0 again would mean the substring is valid

Why store other states
let's say at index 5 we got sum=11 and at index 8 we again got sum 11
that menas between idnex 5 and index 8 forms sum 0 becuase the state remained the same. that's why we require other states as well

length calc = currindex- map stored index when the state occured previously

Notes :
    if prefix(0,x) == prefix(0,y)
    => sum of subarray from (x+1) to (y) is zero . arr[x+1,y]=0
    Now if at any point prefix_sum==0 , ie subarry from (0) to (y) is zero
    => that's why we set first_occ[0]=-1; (coz starting se y point tk is zero array and length of that array will be = y - (-1). here y represents the index at point where prefixsum becomes zero.
*/