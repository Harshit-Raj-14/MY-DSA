PS- 42. Trapping Rain Water
Given n non-negative integers representing an elevation map, compute how much water it can trap after raining.
/* CODE */
/* TWO POINTER O(n), O(1) */
class Solution {
    public int trap(int[] height){
        int l=0;
        int r=height.length-1;
        int maxL=height[l];
        int maxR=height[r];
        int ans=0;
        while(l<r){
            if (maxL<maxR) {
                ans+= maxL-height[l];
                l++;
                maxL=Math.max(maxL, height[l]); //update maxl with next height
            } 
            else{
                ans+=maxR-height[r];
                r--;
                maxR=Math.max(maxR, height[r]); //update maxr with next height
            }
        }
        return ans;
    }
}

/*
LOGIC---
Water only stores in a space if it is contaiend by length on left and right.
Now in preprocessing method we took min(lmax, rmax) for determining how much water can be trapped.
But in fact just knowing the maxl and maxr from both ends will also suffice our solution.

By knowing whether maxl<maxr or maxl>maxr can tell us which length of tower will actually help us to trap the valid water.
l=0, r=n-1
maxl=h[0], maxr=h[n-1]
if(maxl<maxr) l++, trap=maxl-h[i], update maxl with next h[++l]
if(maxl>=maxr) r--, trap=maxr-h[i], update maxr with next h[--r]

Note : it works becuase its the lesser value that traps the valid water. so work on that
*/

/* PREPROCESSING LENGTHS O(n), O(n) */
class Solution {
    public int trap(int[] height){
        int n=height.length;
        int ans=0;
        int l[] = new int[n]; // l[i] := max(height[0..i])
        int r[] = new int[n]; // r[i] := max(height[i..n))
        l[0]=height[0];
        r[n-1]=height[n-1];
        //finding highest towers from left and right
        for (int i=1; i < n; i++) l[i]=Math.max(l[i-1], height[i]);
        for (int i=n-2; i>=0; i--) r[i]=Math.max(r[i+1], height[i]);
        for (int i=0; i < n; i++){
            ans += Math.min(l[i], r[i]) - height[i];  //water that can be trapped at that point
        }
        return ans;
    }
}

/*********************************************************************************************************************/
PS- Max sum path in two arrays (GFG) (AMAZON)
Given two sorted arrays of distinct integers arr1 and arr2. 
Each array may have some elements in common with the other array. 
Find the maximum sum of a path from the beginning of any array to the end of any array. 
You can switch from one array to another array only at the common elements, but when you switch you need to consider the common element only once in the result.

/* CODE */
class Solution{
    public int maxPathSum(List<Integer> arr1, List<Integer> arr2) {
        int n=arr1.size();
        int m=arr2.size();
        int i=0;
        int j=0;
        int sum1=0;
        int sum2=0;
        int ans=0;
        while(i<n && j<m){
            if(arr1.get(i)<arr2.get(j)){ //this might look a bit absurd; but remember array is sorted that's why
                sum1+=arr1.get(i);       //in fact this is being done so that sum1 and sum2 has all the elements accumulated when we reach common point together
                i++;                     //apply this logic on example 2 you will uderstand its need
            }
            else if(arr1.get(i)>arr2.get(j)){
                sum2+=arr2.get(j);
                j++;
            }
            else{   //reached a common point
                ans+=Math.max(sum1, sum2)+arr1.get(i);  //choose between max1 and max2, and add common point once
                i++;
                j++;
                sum1=0; //reinitiate sums 
                sum2=0;
            }
        }
        while(i<n){sum1+=arr1.get(i); i++;}
        while(j<m){sum2+=arr2.get(j); j++;}
        ans+=Math.max(sum1, sum2);
        return ans;
    }
}

/*
LOGIC---
Arrays are sorted.
We can begin from any array and end at any array.
We need to return the maximum sum path it will take to do so.
But we can switch between the two arrays at common points, 
and these common points will contribute only once to the sum path.


eg:
0 1 2  3  4  -> indexes
2 3 7 10 12 -> arr1
1 5 7 8     -> arr2

Here 7 is the common point

So, we can traverse both array and calculate their sum till before 7 as sum1 and sum2.
When we reach 7, it means we could have begin with any array and switched.
That means instead of using 7 to make a choice forward.
Let's say 7 will facilitate as a bridge giving us a choice to take the greater of sum1 or sum2. 
since the vice versa backward is also same.

After this we reinitiate sum1 and sum2 to see which segment gives greater sum before next common point appears.

So, 
sum1=2+3
sum2=1+5
common point = 7
ans=math.max(sum1, sum2) + 7 = 6+7 = 13
sum1=0. sum2=0
sum1=10+12
sum2=8
ans=Math.max(sum1,sum2) = 22

total ans = 22+13 = 35
*/



/*****************************************************************************************************/
PS- Maxx Diff (GFG Weekly - 171)
You are given 2 arrays arr1[] of size n and arr2[] of size m (m>n). 
You have to pick n integers from arr2[] and rearrange it in any order and then make an array out of those chosen elements brr[] such that the sum of brr[i]-arr1[i]| (0 ≤ i ≤ n-1) is maximized.
Find the maximum value of the sum of |brr[i]-arr1[i]| (0 ≤ i ≤ n-1) from all the different possible arrays brr[].
Example 1:
Input: n = 3, m = 5, arr1[] = {6, 3, 2}, arr2[] = {11, 3, 9, 7, 2}
Output: 19
Explanation:
We can select elements brr[]=[2, 9, 11] from arr2 in order to get maximum value |12-6| + |9-3|+ |11-21| = 19.

/* CODE */
class Solution {
    public static long fndMax(int n, int m, int[] arr1, int[] arr2) {
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        int l1=0, r1=n-1;
        int l2=0, r2=m-1;
        long ans=0;
        while(l1<=r1 && l2<=r2){
            if(Math.abs(arr1[l1]-arr2[r2])>=Math.abs(arr1[r1]-arr2[l2])){
                ans+=Math.abs(arr1[l1]-arr2[r2]);
                l1++;
                r2--;
            }
            else{
                ans+=Math.abs(arr1[r1]-arr2[l2]);
                r1--;
                l2++;
                
            }
        }
        return ans;
    }
}

/*
LOGIC---
Max difference will only come when we subtract maximum wiht some minimum value.
Sorting can help us to get max difference.

Sorted arrays are:
arr1=A1,A2,A3,A4
arr2=B1,B2,B3,B4,B5,B6

Case I: Taking n elements from last part of arr2
=>subtracting while moving forward in arr1 and backward in arr2
max_dif= B6-A1 + B5-A2 + B4-A3 + B3-A4 

CaseII: Taking n elements from the front part of arr2 [can be when A1>B6 or soemthing like that at some threshold]
=>subtracting while moving forward in arr1 and arr2
max_dif= B1-A1 + B2-A2 + B3-A3 + B4-A4

CaseIII: 
=> Taking (first element from front of arr1 - last element of arr2) + (n-1 elements from back of arr1 - n-1 elements from front of arr2)
=> Taking (first two element from front of arr1 - last two element of arr2) + (n-2 elements from back of arr1 - n-2 elements from front of arr2)
=> Taking (first i element from front of arr1 - last i element of arr2) + (n-i elements from back of arr1 - n-i elements from front of arr2) and so on.....

=>And in fact Case III: is a very general case
 
Now how we can achieve doing case III in O(n) using two pointer
where we check at each position which first nad last combination is fruitful
*/




/*****************************************************************************************************/
PS- Smallest window in a string containing all the characters of another string
Given two strings s and p. Find the smallest window in the string s consisting of all the characters(including duplicates) of the string p.  
Return "-1" in case there is no such window present. 
In case there are multiple such windows of same length, return the one with the least starting index.

Input: s = "timetopractice", p = "toc"
Output: toprac

/* CODE */
/* TWO POINTER + SLIDING WINDOW  OPTIMIZEED */
class Solution{
    public static String smallestWindow(String s, String p){
        int countp[] = new int[26];
        for(int i=0;i<p.length();i++) countp[p.charAt(i)-'a']++;
        String ans="-1";
        int len=Integer.MAX_VALUE;
        int l=0;
        int r=0;
        int counts[] = new int[26];
        while(r<s.length()){
            counts[s.charAt(r)-'a']++; //updating frequency of s in count
            while(check(counts, countp)){   //once equality found, start checking can we make the window smaller by removing left part until we no longer can
                if(len>r-l+1){
                    len=r-l+1;
                    ans=s.substring(l,r+1);
                }
                counts[s.charAt(l)-'a']--;
                l++;
            }
            r++;
        }
        return ans;
    }
    
    public static boolean check(int counts[], int countp[]){ //check p is contained in curr substring
        for(int i=0;i<counts.length;i++){
            if(countp[i]>counts[i]) return false;
        }
        return true;
    }
}
/*
LOGIC---
To decrease iterations make the window of each substrign first by maintiang their coutn at each step.

*/

/* TWO POINTER TLE */
class Solution{
    public static String smallestWindow(String s, String p){
        int count[] = new int[26];
        for(int i=0;i<p.length();i++) count[p.charAt(i)-'a']++;
        String ans="";
        int len=Integer.MAX_VALUE;
        int l=0;
        int r=0;
        while(r<s.length() && l<=r){    //once equality found, start checking can we make the window smaller by removing left part
            while(check(s.substring(l,r+1), count)){
                if(len>r-l+1){
                    len=r-l+1;
                    ans=s.substring(l,r+1);
                }
                l++;
            }
            r++;
        }
        return ans;
    }
    
    public static boolean check(String s, int count[]){ //check p is contained in curr substring
        int temp[] = new int[26];
        for(int i=0;i<s.length();i++) temp[s.charAt(i)-'a']++;
        for(int i=0;i<count.length;i++){
            if(count[i]>temp[i]) return false;
        }
        return true;
    }
}
/*
LOGIC---
Goal: p should exist as a part of substring of s. sequence or continuity does not matter.
There could be extra elements in s as well. Just p sould be there too in s.

TWO POINTER technique
start l=0, r=0;
We will increment r when we don't have the right numbers of char of p in s.
Once p is found in curr config of l,r
We start increasing l and see whether the substring still contains p or not.
Once again if it stops containing we increase r.
Do it till r reaches n
Store the favorable states.

TC-O(n)
*/

/*
BRUTE FROCE---O(n^2)
p -> count2[26]
s -> 2 for loops try all substrigns and check which one amtches with count2 accordingly
*/


/****************************************************************************************************/
PS- 680. Valid Palindrome II
Given a string s, return true if the s can be palindrome after deleting at most one character from it.

/* CODE */
class Solution {
    public boolean validPalindrome(String s) {
        if(s.length()==0 || s.length()==1) return true;
        if(s.length()==2) return true;  //will always be true, if not palindrome delete one char and make it 
        int i=0;
        int j=s.length()-1;
        while(i<=j){
            if(s.charAt(i)==s.charAt(j)) {i++; j--;}
            else{
                if(isRestPalindrome(s, i+1, j)) return true;    //deleting the left character
                if(isRestPalindrome(s, i , j-1)) return true;   //deleting the right character
                return false;   //cannot be made equal after deleting character
            }
        }
        return true;
    }

    public static boolean isRestPalindrome(String s, int i, int j){
        while(i<=j){
            if(s.charAt(i)!=s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }
}

/*
LOGIC---
Approach:
Firstly check three basic corner cases of string length=0, string length=1 and string length=2. Return accordingly.

Use an extra O(n) space to store the array, reverse it and directly check if its pallindrome or not.
These two approaches will save a lot of time.
    
Using the concept of two pointers, start traversing the string character by character from front and from the
back. If all the the characters comes up to be same, your string must be palindrome.
    
If two characters comes up as not the same, try checking neglecting both the character one at a time, and check
=> if the rest of available string is pallindrome or not (clue: use another function for this checking part).
=> if it comes true even after neglecting any one of the unmatched character. Your string must be pallindrome. 

Else it cannot be a pallindrome.

*/