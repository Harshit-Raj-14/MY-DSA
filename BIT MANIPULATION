PS---
To check if all bits in a number are set.

/* CODE */
public static boolean areAllBitsSet(int number) {
    // For a 32-bit integer, the value with all bits set is -1 (in two's complement representation)
    return number == -1;
}

/* 
LOGIC---
When all bits are set, the value is -1 due to two's complement representation.
*/


PS---
check if a number has all bits set (i.e., it is of the form 2^n - 1)

/* CODE */
public static boolean areAllBitsSet(int number) {
    // A number has all bits set if it is of the form 2^n - 1
    // This can be checked using the property: n & (n + 1) == 0
    return number > 0 && (number & (number + 1)) == 0;
} 

/*
LOGIC---
A number with all bits set is of the form 2^n - 1. 
For example, 1 (1 in binary), 3 (11 in binary), 7 (111 in binary), and so on.
Bitwise Check: The property n & (n + 1) == 0 holds true for numbers that have all bits set. 
This is because adding 1 to such a number results in a number that is a power of 2 (which has exactly one bit set), 
and the bitwise AND of a number and a power of 2 is zero.

Reason : if number has all set bits like 3, then next number+1 will be 4. Whose only set bit will be the next bit which was previously 0.
So when we AND them they give us always 0.
 */


 /**************************************************************************************************/
 PS- 2220. Minimum Bit Flips to Convert Number
Tell minimum  number of flips required to convert a number into goal.

/* CODE */
class Solution {
    public int minBitFlips(int n, int goal) {
        int xor=n^goal;
        int flip=0;
        while(xor!=0){
            if((xor&1)==1) flip++;
            xor=xor>>1;
        }
        return flip;
    }
}

/*
LOGIC---
XOR of two numbers would have 1 where the bits were different.
no of set bits in or = difference in bit at that place = no of flips required
*/



/*****************************************************************************************************/
PS- Add two numbers without using arithmetic operators

/* CODE */
class Solution {
    public int addwithoutplus(int a, int b) {
        // Iterate till there is no carry 
        while (b!=0){ 
            // carry contains common set bits of a and b, left shifted by 1
            int carry = (a&b)<<1;   //calculate all places where carry will be added
            // Update a with (a + b without carry)
            a = a^b;    //add a and b without carry
            // Update b with carry
            b = carry; //update b with carry to be considered for re-addition
        } 
        return a;
    }
}

/*
 APPROACH---
 This is a one pass process.
 First identify places where carry will be added.
 Now add a and b as if carry does not exist using case I XORING.
 Now update b to act like carry which needs to be added to our sum to make it complete.
 This will go on until b or rather say carry becomes 0.
 */

/*
IMPORTANT OBSERVATIONS---
a & b will have only those bits set which are set in both a and b.
a ^ b will have only those bits set which are set in either a or b but not in both. 

In actual binary addition
Case I: 0+1 or 1+0 => gives 1 => set+unset = set^unset = same a^b
We can say that,  a+b without carry = a^b.

Case II: 1+1 => gives 10 => set+set => we need to account for carry
Since the carry is shifted 1 place to the left
carry = (a & b) << 1 => where set+set==1 => a&b==1 we shift it one place left making 10 config.

*/


/* ANOTHER WAY */
class Solution {
    public int addwithoutplus(int a, int b) {
        int i = 0;
        int sum = 0;
        int carry = 0;
        while (a!=0 || b!=0 || carry!=0) {
            int bit1 = (a>>i) & 1;   // bit at i-th index of a
            int bit2 = (b>>i) & 1;   // bit at i-th index of b
            // Calculate the sum bit at i-th position
            int bitSum = bit1 ^ bit2 ^ carry;
            sum |= (bitSum << i);      // Set the i-th bit of sum
            // Calculate carry for next bit
            carry = (bit1 & bit2) | (bit1 & carry) | (bit2 & carry);
            i++;   // Move to the next bit
        }
        return sum;
    }
}


/********************************************************************************************************/
PS- Single Element Among Triplets [GFG - GOOGLE]
Given an array where every element occurs three times, except one element which occurs only once. 
Find the element that occurs once.
Input: arr[] = {12, 1, 12, 3, 12, 1, 1, 2, 3, 3} Output: 2 
Explanation: In the given array all element appear three times except 2 which appears once.

/* CODE */
class Solution {
    static int singleElement(int[] arr , int n) {
        int ans=0;
        // Iterate through every bit
        for (int i=0; i<32; i++) {
            // Find sum of set bits at ith bit position
            int sum = 0;
            int mask = (1 << i);
            for (int j=0; j<n; j++){    //iterating through array
                if ((arr[j] & mask) != 0) sum++;
            }
            // The bits with sum not multiple of 3, are the bits of element with single occurrence.
            if ((sum%3) != 0) ans |= mask;
        }
        return ans;
    }
}


/*
LOGIC---
The solution is based on the observation that in a binary representation of numbers, 
the bits that are set to 1 in the number that occurs only once will have a sum that is not a multiple of 3, 
while the bits that are set to 1 in the numbers that occur three times will have a sum that is a multiple of 3.
*/



/*****************************************************************************************************/
PS- 3133. Minimum Array End
You are given two integers n and x. 
You have to construct an array of positive integers nums of size n where, nums[i+1]>nums[i], 
and the result of the bitwise AND operation of all elements of nums is x.
Return the minimum possible value of nums[n - 1].

Input: n = 3, x = 4
Output: 6
Explanation: nums can be [4,5,6] and its last element is 6.

/* CODE */
class Solution {
    public long minEnd(int n, int x) {
        long ans = 0;
        int idx = n - 1;
        int i = 0;
        while (x != 0 || idx != 0) {
            if ((x & 1) == 1){ // If x has a set bit at the current position
                ans |= (1L << i); // Set the corresponding bit in ans
            } 
            else{   // If x has an unset bit, use bits from idx
                ans |= ((long)(idx & 1) << i);  // Place the current bit of idx in ans
                idx >>= 1;          // Move to the next bit of idx
            }
            x >>= 1;        // Move to the next bit of x
            i++;
        }
        
        return ans;
    }
}

/*
LOGIC---
Goal : make an ascending array whose AND is x. return the minimum possible value of last element of nums.

To get the final x while AND the all elements of nums, we need to keep the setbits of x untouched. 
That means we will have all the bits as set in all element of nums. 

Since our task is to create as small as possible ascending array, we can start with all zeros, then 1, then 2, etc.

0 1 1 1 0 0 1 => x
Now these are elements of array with set bit at same position as x. 
  1 1 1     1 
  1 1 1     1
  1 1 1     1
and so on...
Now since we want increasing numbers in array, we replace the empty spaces with increasing binaries:0, 1, 10, 11, 100, 101 and so on, 
which actually translates to: (decimal) 0, 1, 2, 3, 4, 5 and so...
which is in fact the indexing of array.

So, the last element of our required array can be constructed using x and n-1(index no.).

Now where to fill the bits of n-1 in x is where the unsetbits occur.
And that will be our answer.

0 1 1 1 0 0 1 => x
_ 1 1 1 _ _ 1 => skeleton we need to fill
0 1 1 1 0 0 1 => place 0 => 0
0 1 1 1 0 1 1 => place 01 => 1    
0 1 1 1 1 0 1 => place 10 => 2
0 1 1 1 1 1 1 => place 11 => 3
1 1 1 1 0 0 1 => place 100 => 4
1 1 1 1 0 1 1 => place 101 => 5

As you can see we are filling the unset bit position in X, linearly that's why last element of array will be merge X with n-1, means in every unset bit position of X put binary representation of n-1.
*/