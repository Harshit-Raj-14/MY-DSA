PS- Sort 0s, 1s and 2s || Sort Colors

/* CODE */

/* Dutch National Flag algorithm O(n), O(1) */
class Solution {
    public void sort012(ArrayList<Integer> arr) {
        int n = arr.size();
        int low = 0, high = n - 1, mid = 0;
        while (mid <= high) {
            if (arr.get(mid) == 0) Collections.swap(arr, mid++, low++);
            else if (arr.get(mid) == 1) mid++;
            else Collections.swap(arr, mid, high--);
        }
    }
}

/*
LOGIC---
DNF Sort => USED TO SORT OR GROUP THREE UNIQUE VALUES
IDEA--- push all low values to left, high values to the right andw e don't care about the mid values
we can take advantage of the fact that the array only has three unique values. 
This enables us to use a more efficient approach called the Dutch National Flag Algorithm, 
proposed by Edsger W. Dijkstra.

The algorithm maintains three pointers:
=> low: marks the boundary for 0s (elements before low are all 0).
=> mid: is used to traverse the array.
=> high: marks the boundary for 2s (elements after high are all 2).

This way, we can sort the array in one linear pass without using extra space.
*/

/* O(2n), O(1) */
void sort012(int arr[], int n){
    int cnt0 = 0, cnt1 = 0, cnt2 = 0;
    for (int i = 0; i < n; i++) {
      if (arr[i] == 0) cnt0++;
      else if (arr[i] == 1) cnt1++;
      else cnt2++;
    } 
    for (int i = 0; i < cnt0; i++) arr[i] = 0; 
    for (int i = cnt0; i < cnt0 + cnt1; i++) arr[i] = 1; 
    for (int i = cnt0 + cnt1; i < n; i++) arr[i] = 2;
}