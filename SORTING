PS- Sort 0s, 1s and 2s || Sort Colors

/* CODE */

/* Dutch National Flag algorithm O(n), O(1) */
class Solution {
    public void sort012(ArrayList<Integer> arr) {
        int n = arr.size();
        int low = 0, high = n - 1, mid = 0;
        while (mid <= high) {
            if (arr.get(mid) == 0) Collections.swap(arr, mid++, low++);
            else if (arr.get(mid) == 1) mid++;
            else Collections.swap(arr, mid, high--);
        }
    }
}

/*
LOGIC---
DNF Sort => USED TO SORT OR GROUP THREE UNIQUE VALUES
IDEA--- push all low values to left, high values to the right andw e don't care about the mid values
we can take advantage of the fact that the array only has three unique values. 
This enables us to use a more efficient approach called the Dutch National Flag Algorithm, 
proposed by Edsger W. Dijkstra.

The algorithm maintains three pointers:
=> low: marks the boundary for 0s (elements before low are all 0).
=> mid: is used to traverse the array.
=> high: marks the boundary for 2s (elements after high are all 2).

This way, we can sort the array in one linear pass without using extra space.
*/

/* O(2n), O(1) */
void sort012(int arr[], int n){
    int cnt0 = 0, cnt1 = 0, cnt2 = 0;
    for (int i = 0; i < n; i++) {
      if (arr[i] == 0) cnt0++;
      else if (arr[i] == 1) cnt1++;
      else cnt2++;
    } 
    for (int i = 0; i < cnt0; i++) arr[i] = 0; 
    for (int i = cnt0; i < cnt0 + cnt1; i++) arr[i] = 1; 
    for (int i = cnt0 + cnt1; i < n; i++) arr[i] = 2;
}


/*****************************************************************************************************/
PS- 3011. Find if Array Can Be Sorted
You are given an array of positive integers nums.
In one operation, you can swap any two adjacent elements if they have the same number of set bits.
You are allowed to do this operation any number of times.
Return true if you can sort the array, else return false.

/* CODE */
/* Sortable Segments O(n), O(1) */
class Solution {
    public boolean canSortArray(int[] nums) {
        int currgroupmin=Integer.MAX_VALUE;
        int currgroupmax=Integer.MIN_VALUE;
        int prevgroupmax=Integer.MIN_VALUE;
        int i=0;
        while(i<nums.length){
            int start=i;
            currgroupmin=nums[i];
            currgroupmax=nums[i];
            int currsetbit=getsetbit(nums[i]);
            while(i<nums.length && getsetbit(nums[i])==currsetbit){
                currgroupmin=Math.min(currgroupmin, nums[i]);
                currgroupmax=Math.max(currgroupmax, nums[i]);
                i++;
            }
            if(prevgroupmax!=Integer.MIN_VALUE){
                if(currgroupmin<prevgroupmax) return false;
            }
            prevgroupmax=currgroupmax;
        }
        return true;
    }

    public static int getsetbit(int n){
        int set=0;
        while(n>0){
            if((n&1)==1) set++;
            n=n>>1;
        }
        return set;
    }
}

/*
LOGIC---
Being able to swap 2 adjacent elements means that any number of contiguous elements can be sorted as long as they all have the same number of set bits.

Consider a run of numbers with the same number of set bits to be a group. 
Each group contains a maximum and minimum value. 
If the maximum of the proceeding group is greater than the minimum of the following group, then the array cannot be sorted.

We only need to find if the array can be sorted, and we don't need to sort the array

Example 1:
nums = [8,4,2,30,15]
bits = [1,1,1, 4, 4]
Sorting group wise : (2,4,8),(15,30)
Now since 8<15 => max of previous group < min of next group 
=> we can say the two groups can always be sorted properly

Example 2:
nums = [1,2,3,4,5]
bits = [1,1,2,1,2]
       (1,2),(3),(4),(5)

Example 3:
nums = [3,16,8,4,2]
bits = [2, 1,1,1,1]
       (3),(2,4,8,16)

*/